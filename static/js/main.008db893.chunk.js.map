{"version":3,"sources":["utils/constants.js","utils/getIsLoggedIn.js","router/guards/requireLogin.js","services/history.service.js","components/nav/nav.jsx","actions/auth-action.js","actions/type.js","pages/puzzle-page/puzzle-piece/puzzle-piece.jsx","pages/puzzle-page/puzzle-grid-slot/puzzle-grid-slot.jsx","components/timer/timer.jsx","shared/constants.js","services/grid.service.js","pages/puzzle-page/puzzle-grid/puzzle-grid.jsx","actions/puzzle-action.js","pages/puzzle-page/puzzle-menu/puzzle-menu.jsx","pages/puzzle-page/puzzle-setting/puzzle-setting.jsx","pages/puzzle-page/puzzle-score-board/puzzle-score-board.jsx","pages/puzzle-page/puzzle-page.jsx","pages/puzzle-page/puzzle-page-route.js","pages/home-page/home-page.jsx","pages/home-page/home-page-route.js","pages/clock-page/clock/clock.jsx","pages/clock-page/clock-page.jsx","pages/clock-page/clock-page-route.js","pages/login-page/login-page.jsx","pages/login-page/login-page-route.js","router/main-router.js","reducers/auth-reducer.js","reducers/puzzle-reducer.js","reducers/index.js","store/store.js","App.jsx","serviceWorker.js","index.js"],"names":["STORAGE_KEYS","Object","freeze","IS_LOGGED_IN","getIsLoggedIn","localStorage","getItem","requireLogin","to","from","next","meta","redirect","createBrowserHistory","Nav","props","logout","bind","this","logoutAction","history","push","isLoggedIn","className","onClick","style","color","React","Component","propsType","PropTypes","func","isRequired","connect","state","auth","dispatch","removeItem","type","PuzzlePiece","id","draggable","PuzzleGridSlot","pieceId","key","createPuzzlePiece","Timer","_isMounted","_isStopped","subscribeStop","updateStop","stop","stopTimer","emitTime","time","isOn","start","startTimer","resetTimer","upTimingFunc","prevProps","nextProps","setState","Date","now","timer","setInterval","clearInterval","setTimeout","upTimer","Math","floor","GRID_SIZE_LV1","height","width","getIdNumber","item","split","getIdNumbers","items","ids","forEach","getPieceIdSet","gridSize","emptySlotQuantity","pieceIdSet","i","getRandomPieceId","splicePos","random","length","splice","findEmptySlots","slots","emptySlots","slot","hasChildNodes","coloringEmptySlots","emptySlot","backgroundColor","transformSlots","arraySize","transformedSlots","emptySlotIds","slotId","draggableChecked","emptySlotId","includes","childDraggable","firstElementChild","isAdjacent","comparedSlotId","gridService","GridService","gridSlotSize","gridStyle","gridTemplateColumns","gridTemplateRows","gridGap","border","PuzzleGrid","emptySlotBg","isWin","subscribeWinning","callback","getEmittedTime","emittedTime","console","log","winningInfo","playedTime","playerName","level","gameLevel","getWinningInfo","announceWinning","gameSettings","nextState","isUpdated","initDraggingEnvironment","restartGame","count","getEmptySlotIds","gridSlots","Array","document","querySelectorAll","puzzlePieces","draggedItem","originalSlot","piece","addEventListener","parentElement","display","e","preventDefault","draggedSlot","parentNode","draggedSlotId","append","checkWiningCondition","winningCount","child","childId","broadcastWinning","alert","createGridSlots","map","puzzle","info","PuzzleMenu","PuzzleSetting","change","event","changeGameLevel","target","value","htmlFor","marginRight","name","onChange","puzzleScoreBoard","index","indexOf","PuzzlePage","path","exact","component","PuzzlePageRoute","HomePage","HomePageRoute","AUTH_ONLY","Clock","hour","minute","second","transform","ClockPage","clock","getHours","getMinutes","getSeconds","ClockPageRoute","LoginPage","login","loginAction","setItem","LoginPageRoute","GLOBAL_GUARDS","MainRouter","basename","process","guards","loading","initialState","changeLevel","combineReducers","action","middleware","thunk","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootReducer","compose","applyMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.008db893.chunk.js","sourcesContent":["export const STORAGE_KEYS = Object.freeze({\r\n  IS_LOGGED_IN: 'isLoggedIn',\r\n});","import { STORAGE_KEYS } from 'utils/constants';\r\n\r\nconst getIsLoggedIn = () => localStorage.getItem(STORAGE_KEYS.IS_LOGGED_IN) === 'true';\r\n\r\nexport default getIsLoggedIn;\r\n","import { AUTH_ONLY } from 'router/types';\r\nimport { getIsLoggedIn } from 'utils';\r\n\r\nconst requireLogin = (to, from, next) => {\r\n  if (to.meta[AUTH_ONLY] && !getIsLoggedIn()) {\r\n    next.redirect('/login');\r\n  }\r\n  next();\r\n};\r\n\r\nexport default requireLogin;","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from 'react';\r\nimport './nav.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport history from 'services/history.service';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { logoutAction } from 'actions/auth-action';\r\n\r\nclass Nav extends React.Component {\r\n  constructor(props) {\r\n    super(props);    \r\n    this.logout = this.logout.bind(this);\r\n  } \r\n\r\n  logout() {    \r\n    this.props.logoutAction();        \r\n    history.push('/login')\r\n  };\r\n\r\n  render() {\r\n    const isLoggedIn = this.props.isLoggedIn;    \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"nav\">\r\n          <h3>Logo</h3>\r\n          <ul className=\"nav-links\">\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/clock\">Clock</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/puzzle\">Puzzle</Link>\r\n            </li>\r\n          </ul>\r\n          {isLoggedIn && <button onClick={this.logout} style={{ color: 'black' }}>Log out</button>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nNav.propsType = {\r\n  logoutAction: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.auth.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps, { logoutAction })(Nav);","import {LOGIN, LOGOUT} from 'actions/type';\r\nimport { STORAGE_KEYS } from 'utils/constants';\r\nimport { getIsLoggedIn } from 'utils';\r\nexport function loginAction() {\r\n  return function(dispatch) {\r\n    localStorage.setItem(STORAGE_KEYS.IS_LOGGED_IN, 'true');\r\n    dispatch({\r\n      type: LOGIN,\r\n      isLoggedIn: getIsLoggedIn()\r\n    })\r\n  }\r\n}\r\n\r\nexport function logoutAction() {\r\n  return function(dispatch) {\r\n    localStorage.removeItem(STORAGE_KEYS.IS_LOGGED_IN);\r\n    dispatch({\r\n      type: LOGOUT,\r\n      isLoggedIn: getIsLoggedIn()\r\n    })\r\n  }\r\n}","export const LOGIN = 'login';\r\nexport const LOGOUT = 'logout'\r\n","import React from 'react';\r\nimport './puzzle-piece.scss';\r\n\r\nexport default class PuzzlePiece extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id={`piece-${this.props.id}`} className=\"puzzle-piece\" draggable={this.props.draggable}>\r\n        <h1>{this.props.id}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PuzzlePiece from '../puzzle-piece/puzzle-piece'\r\nimport './puzzle-grid-slot.scss';\r\n\r\nexport default class PuzzleGridSlot extends React.Component {\r\n\r\n  createPuzzlePiece() {\r\n    const id = this.props.pieceId; \r\n    if (id !== null) {      \r\n      return <PuzzlePiece key={id} id={id} draggable={false}/>\r\n    }    \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div id={`slot-${this.props.id}`} className=\"puzzle-grid__slot\">\r\n        {this.createPuzzlePiece()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './timer.scss';\r\n\r\nexport default class Timer extends React.Component {\r\n  _isMounted = false;\r\n  _isStopped = false;\r\n  subscribeStop = () => {\r\n    this.props.updateStop((stop) => {           \r\n      if (stop && !this._isStopped) {\r\n        this.stopTimer();\r\n        this._isStopped = true;\r\n        this.props.emitTime(this.state.time)   \r\n      }                    \r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      time: 0,\r\n      isOn: false,\r\n      start: 0\r\n    }\r\n    this.startTimer = this.startTimer.bind(this)\r\n    this.stopTimer = this.stopTimer.bind(this)\r\n    this.resetTimer = this.resetTimer.bind(this)\r\n    this.upTimingFunc = this.upTimingFunc.bind(this)    \r\n  }\r\n\r\n  UNSAFE_componentWillMount() {\r\n    \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.stopTimer()\r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n  \r\n  componentDidUpdate(prevProps) {\r\n    // console.log(this.props);\r\n    \r\n    if (this.props.stop !== prevProps.stop && this.props.stop === true) {\r\n      this.stopTimer();\r\n    }\r\n  }\r\n\r\n  UNSAFE_componentWillReceiveProps(nextProps) {\r\n    // console.log(nextProps);    \r\n    this.setState(state => state.isOn = !nextProps.stop );\r\n  }\r\n\r\n  startTimer() {\r\n    this.setState({\r\n      isOn: true,\r\n      time: this.state.time,\r\n      start: Date.now() - this.state.time\r\n    })\r\n    this.timer = setInterval(() => this.setState({\r\n      time: Date.now() - this.state.start\r\n    }), 10);\r\n  }\r\n\r\n  stopTimer() {\r\n    this.setState({isOn: false})\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  resetTimer() {\r\n    this.setState({time: 0, isOn: false})\r\n  }\r\n\r\n  upTimingFunc() {\r\n    this.startTimer();\r\n  }\r\n\r\n  downTimingFunc(start) {\r\n\r\n  }\r\n\r\n  render() { \r\n    if (!this._isStopped) {\r\n      setTimeout(() => this.subscribeStop(), 0)    \r\n    }\r\n    \r\n    if (this.props.upTimer) {\r\n      return (\r\n        <div className=\"component-wrapper\">\r\n          \r\n        </div>\r\n      );\r\n    }\r\n    \r\n    let start = (this.state.time === 0) ?\r\n      <button onClick={this.startTimer}>start</button> : null      \r\n    let stop = (this.state.time === 0 || !this.state.isOn) ? null :      \r\n      <button onClick={this.stopTimer}>stop</button>\r\n    let resume = (this.state.time === 0 || this.state.isOn) ? null :      \r\n      <button onClick={this.startTimer}>resume</button>\r\n    let reset = (this.state.time === 0 || this.state.isOn) ? null :      \r\n      <button onClick={this.resetTimer}>reset</button>          \r\n    return (     \r\n      <div className={`component-wrapper ${this.props.className}`}>\r\n        <h3>timer: {(Math.floor(this.state.time / 10) / 100)} s</h3>        \r\n        {/* {start}\r\n        {resume}\r\n        {stop}\r\n        {reset} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const GRID_SIZE_LV1 = {\r\n  height: 3,\r\n  width: 3\r\n}\r\n\r\nexport const GRID_SIZE_LV2 = {\r\n  height: 4,\r\n  width: 4\r\n}\r\n\r\nexport default GRID_SIZE_LV1","const GridService = () => {\r\n  return {\r\n    getPieceIdSet,\r\n    getRandomPieceId,\r\n    getIdNumber,\r\n    getIdNumbers,\r\n    findEmptySlots,\r\n    coloringEmptySlots,\r\n    transformSlots,\r\n    isAdjacent\r\n  }\r\n};\r\n\r\nconst getIdNumber = (item) => {\r\n  return item.id.split('-')[1]\r\n}\r\n\r\nconst getIdNumbers = (items) => {\r\n  const ids = []\r\n  items.forEach(item => {\r\n    const id = getIdNumber(item);\r\n    ids.push(id)\r\n  })\r\n  return ids;\r\n}\r\n\r\nconst getPieceIdSet = (gridSize, emptySlotQuantity) => {\r\n  const pieceIdSet = [];\r\n  for (let i = 0; i < gridSize - emptySlotQuantity; i++) {      \r\n    pieceIdSet.push(i)      \r\n  }\r\n  return pieceIdSet\r\n}\r\n\r\nconst getRandomPieceId = (pieceIdSet) => {       \r\n  const splicePos = Math.floor(Math.random()*100 % pieceIdSet.length)\r\n  const pieceId = pieceIdSet.splice(splicePos, 1)\r\n  return pieceId[0]; \r\n}\r\n\r\nconst findEmptySlots = (slots) => {    \r\n  let emptySlots = [];\r\n  slots.forEach(slot => {\r\n    if (!slot.hasChildNodes()) {\r\n      emptySlots.push(slot);        \r\n    }\r\n  })\r\n  return emptySlots;\r\n}\r\n\r\nconst coloringEmptySlots = (emptySlots, color) => {\r\n  emptySlots.forEach(emptySlot => emptySlot.style.backgroundColor = color);  \r\n}\r\n\r\nconst transformSlots = (slots, emptySlots, arraySize) => {    \r\n  const transformedSlots = [];\r\n  const emptySlotIds = getIdNumbers(emptySlots);\r\n\r\n  slots.forEach(slot => {\r\n    const slotId = getIdNumber(slot);\r\n    let draggableChecked = false;     \r\n    emptySlotIds.forEach(emptySlotId => {\r\n      if (!emptySlotIds.includes(slotId) && !draggableChecked) {        \r\n        let childDraggable = slot.firstElementChild.draggable;\r\n        if (isAdjacent(slotId, emptySlotId, arraySize) && !childDraggable) {\r\n          slot.firstElementChild.draggable = true;\r\n          draggableChecked = true;       \r\n        }\r\n        else {\r\n          slot.firstElementChild.draggable = false;  \r\n        }  \r\n      }         \r\n    });   \r\n    transformedSlots.push(slot);\r\n  })\r\n  return transformedSlots;\r\n}\r\n\r\nconst isAdjacent = (slotId, comparedSlotId, arraySize) => {\r\n  slotId = +slotId;\r\n  comparedSlotId = + comparedSlotId; \r\n  if ((slotId === comparedSlotId + 1 && Math.floor(slotId/arraySize) === Math.floor(comparedSlotId/arraySize)) ||\r\n    (slotId === comparedSlotId - 1 && Math.floor(slotId/arraySize) === Math.floor(comparedSlotId/arraySize)) ||\r\n    slotId === comparedSlotId + arraySize ||\r\n    slotId === comparedSlotId - arraySize) \r\n  {\r\n    return true;\r\n  }\r\n  return false\r\n}\r\n\r\nexport default GridService;","import React from 'react';\r\nimport './puzzle-grid.scss';\r\nimport PuzzleGridSlot from '../puzzle-grid-slot/puzzle-grid-slot';\r\nimport Timer from 'components/timer/timer';\r\nimport GRID_SIZE_LV1 from 'shared/constants';\r\nimport * as _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { broadcastWinning, restartGame, getWinningInfo } from 'actions/puzzle-action';\r\nimport GridService from 'services/grid.service';\r\n\r\nconst gridService = GridService();\r\n\r\nconst gridSlotSize = (gridSize) => {\r\n  let width = 160\r\n  let height = 160\r\n  if (gridSize.width > 3 || gridSize.height > 3) {\r\n    width = 120\r\n    height = 120 \r\n  }\r\n  return {\r\n    width,\r\n    height\r\n  }  \r\n}\r\n\r\nconst gridStyle = { \r\n  width: `${GRID_SIZE_LV1.width * gridSlotSize(GRID_SIZE_LV1).width + 30}px`,\r\n  height: `${GRID_SIZE_LV1.height * gridSlotSize(GRID_SIZE_LV1).height + 30}px`,  \r\n  gridTemplateColumns: `repeat(${GRID_SIZE_LV1.width}, ${gridSlotSize(GRID_SIZE_LV1).width}px)`,\r\n  gridTemplateRows: `repeat(${GRID_SIZE_LV1.height}, ${gridSlotSize(GRID_SIZE_LV1).height}px)`,\r\n  gridGap: `10px`,\r\n  border: `1px solid wheat`,  \r\n}\r\n\r\nclass PuzzleGrid extends React.Component {\r\n  emptySlotBg = 'rgba(255, 255, 255, 0.3)';\r\n  _isMounted = false;\r\n  isWin = false; \r\n  subscribeWinning = (callback) => {\r\n    this.isWin = this.props.isWin;      \r\n    callback(this.isWin);\r\n  }\r\n  getEmittedTime = (emittedTime) => {\r\n    console.log('get time');     \r\n    const winningInfo = {\r\n      playedTime: emittedTime,\r\n      playerName: 'Unknown player',\r\n      level: this.props.gameLevel.level\r\n    }\r\n    this.props.getWinningInfo(winningInfo)\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.announceWinning = this.announceWinning.bind(this);\r\n    this.gameSettings = {\r\n      emptySlotQuantity: props.gameLevel.emptySlotQuantity,\r\n      arraySize: props.gameLevel.arraySize\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.isUpdated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  componentDidMount() {    \r\n    this.initDraggingEnvironment();   \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.restartGame();\r\n  }\r\n\r\n  getEmptySlotIds(gridSize, emptySlotQuantity) {\r\n    const emptySlotIds = [];\r\n    let count = 0;\r\n    while (count < emptySlotQuantity) {\r\n      const emptySlotId = Math.floor(Math.random()*100 % gridSize);\r\n      if (emptySlotIds.includes(emptySlotId)) {\r\n        continue;\r\n      }\r\n      emptySlotIds.push(emptySlotId)\r\n      count++; \r\n    }\r\n    return emptySlotIds;    \r\n  }\r\n\r\n\r\n  createGridSlots(emptySlotQuantity) {\r\n    const slots = [];\r\n    const gridSize = GRID_SIZE_LV1.height * GRID_SIZE_LV1.width;\r\n    const emptySlotIds = this.getEmptySlotIds(gridSize, emptySlotQuantity);\r\n    const pieceIdSet = gridService.getPieceIdSet(gridSize, emptySlotQuantity);    \r\n    for (let i = 0; i < gridSize; i++) {\r\n      let pieceId = null;\r\n      if (!emptySlotIds.includes(i)) {\r\n        pieceId = gridService.getRandomPieceId(pieceIdSet);\r\n      }\r\n      slots.push(<PuzzleGridSlot id={i} key={i} pieceId={pieceId} />)\r\n    }\r\n    return slots;\r\n  }\r\n\r\n  initDraggingEnvironment() {\r\n    let gridSlots = Array.from(document.querySelectorAll('.puzzle-grid__slot'));    \r\n    let emptySlots = gridService.findEmptySlots(gridSlots)    \r\n    let transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);\r\n    const puzzlePieces = Array.from(document.querySelectorAll('.puzzle-piece'));    \r\n    gridService.coloringEmptySlots(emptySlots, this.emptySlotBg)     \r\n    let draggedItem = null;\r\n    let originalSlot = null;\r\n\r\n    puzzlePieces.forEach(piece => {      \r\n      piece.addEventListener('dragstart', () => {\r\n        originalSlot = piece.parentElement;        \r\n        draggedItem = piece;\r\n        setTimeout(() => {\r\n          piece.style.display = 'none';\r\n        })\r\n      });\r\n      \r\n      piece.addEventListener('dragend', () => {       \r\n        setTimeout(() => {          \r\n          draggedItem.style.display = 'flex';\r\n          draggedItem = null\r\n        })\r\n      });  \r\n      \r\n      gridSlots.forEach(slot => {\r\n        slot.addEventListener('dragover', (e) => {\r\n          e.preventDefault();          \r\n        });\r\n\r\n        slot.addEventListener('dragenter', (e) => {\r\n          e.preventDefault();\r\n          if (originalSlot.id !== slot.id && !slot.hasChildNodes()) {\r\n            slot.style.backgroundColor = 'rgba(255, 255, 255, 0.6)'           \r\n          }                \r\n        });\r\n\r\n        slot.addEventListener('dragleave', (e) => {\r\n          e.preventDefault();\r\n          const emptySlotIds = gridService.getIdNumbers(emptySlots);\r\n          const slotId = gridService.getIdNumber(slot)\r\n          if (!emptySlotIds.includes(slotId)  ) {\r\n            slot.style.backgroundColor = 'rgba(255, 255, 255, 1)'   \r\n          }\r\n          else {\r\n            slot.style.backgroundColor = this.emptySlotBg  \r\n          }                 \r\n        });\r\n        \r\n        slot.addEventListener('drop', (e) => {\r\n          const draggedSlot = draggedItem.parentNode;\r\n          const slotId = gridService.getIdNumber(slot)\r\n          const draggedSlotId = gridService.getIdNumber(draggedSlot)\r\n          console.log(draggedSlot);                       \r\n          if (!slot.hasChildNodes() && gridService.isAdjacent(slotId, draggedSlotId, this.gameSettings.arraySize)) {            \r\n            slot.append(draggedItem)            \r\n            slot.style.backgroundColor = 'rgba(255, 255, 255, 1)'\r\n            gridSlots = Array.from(document.querySelectorAll('.puzzle-grid__slot'));    \r\n            emptySlots = gridService.findEmptySlots(gridSlots)\r\n            gridService.coloringEmptySlots(emptySlots, this.emptySlotBg)    \r\n            transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);            \r\n            setTimeout(() => this.checkWiningCondition(transformedSlots, emptySlots), 100)            \r\n          }\r\n          else if (slotId !== draggedSlotId) {\r\n            slot.style.backgroundColor = this.emptySlotBg\r\n          }          \r\n        });         \r\n      })\r\n    });\r\n  }\r\n\r\n  checkWiningCondition(gridSlots, emptySlots) {\r\n    let count = 0;\r\n    const winningCount = gridSlots.length - emptySlots.length;       \r\n    gridSlots.forEach(slot => {\r\n      const child = slot.firstElementChild;\r\n      const slotId = gridService.getIdNumber(slot);\r\n      let childId = null;\r\n      if (child) {\r\n        childId = gridService.getIdNumber(child)\r\n      }\r\n      if (slotId === childId) {\r\n        count++;\r\n      }\r\n    })       \r\n    if (count === winningCount) {\r\n      this.announceWinning();\r\n    }\r\n  }\r\n\r\n  announceWinning() {\r\n    this.props.broadcastWinning();    \r\n    setTimeout(() => {\r\n      console.log('You win the game', this.props.isWin);\r\n      alert('Congratulation! You win the game')  \r\n    }, 100)      \r\n  }\r\n  \r\n  render() {    \r\n    const gridSlots = this.createGridSlots(this.gameSettings.emptySlotQuantity);    \r\n    return (\r\n      <div className=\"component-wrapper puzzle-wrapper\">\r\n        <div className=\"puzzle-grid\" style={gridStyle}>\r\n          {gridSlots.map(item => item)}\r\n        </div>\r\n        <Timer className={'timer-pos'} \r\n          stop={this.isWin} \r\n          updateStop={this.subscribeWinning} \r\n          emitTime={this.getEmittedTime}\r\n        />\r\n        {/* <button onClick={this.announceWinning}>Win</button> */}\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n\r\nPuzzleGrid.propsType = {\r\n  broadcastWinning: PropTypes.func.isRequired,\r\n  restartGame: PropTypes.func.isRequired,\r\n  getWinningInfo: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  isWin: state.puzzle.isWin,\r\n  gameLevel: state.puzzle.gameLevel\r\n})\r\n\r\nexport default connect(mapStateToProps, { broadcastWinning, restartGame, getWinningInfo })(PuzzleGrid);","\r\nexport function broadcastWinning() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: true\r\n    })\r\n  }\r\n}\r\n\r\nexport function restartGame() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: false\r\n    })\r\n  }\r\n}\r\n\r\nexport function changeGameLevel(level) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'changeGameLevel',\r\n      level\r\n    })\r\n  }\r\n}\r\n\r\nexport function getWinningInfo(info) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'getWinningInfo',\r\n      winningInfo: info\r\n    })\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-menu.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class PuzzleMenu extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <ul className=\"puzzle-menu\">\r\n          <li>\r\n            <Link to=\"/puzzle/game\">Start Game</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/puzzle/score-board\">Score Board</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/puzzle/setting\">Setting</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-setting.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { changeGameLevel } from 'actions/puzzle-action';\r\n\r\nclass PuzzleSetting extends React.Component {  \r\n  change = (event) => {    \r\n    this.props.changeGameLevel(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"puzzle-setting\">\r\n          <div className=\"setting-option-wrapper\">\r\n            <label htmlFor=\"level\" style={{marginRight: '10px'}}>Game Level:</label>\r\n            <select name=\"level\" id=\"level\" onChange={this.change} value={this.props.level}>\r\n              <option value=\"Easy\">Easy</option>\r\n              <option value=\"Normal\">Normal</option>\r\n              <option value=\"Hard\">Hard</option>\r\n            </select> \r\n          </div>\r\n                   \r\n          <li>\r\n            <Link to=\"/puzzle\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPuzzleSetting.propsType = {  \r\n  changeGameLevel: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  level: state.puzzle.gameLevel.level\r\n})\r\n\r\nexport default connect(mapStateToProps, { changeGameLevel })(PuzzleSetting);\r\n","import React from 'react';\r\nimport './puzzle-score-board.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass puzzleScoreBoard extends React.Component {  \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"puzzle-menu\">\r\n          {this.props.winningInfo.map((info) => {\r\n            const index = this.props.winningInfo.indexOf(info)\r\n            return(\r\n              <p key={index}>{index+1}. {info.playerName}: {+info.playedTime/1000}s ({info.level})</p>\r\n            ) \r\n          })}          \r\n          <li>\r\n            <Link to=\"/puzzle\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  winningInfo: state.puzzle.winningInfo\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(puzzleScoreBoard);\r\n","import React from 'react';\r\nimport './puzzle-page.scss';\r\nimport PuzzleGrid from './puzzle-grid/puzzle-grid';\r\nimport PuzzleMenu from './puzzle-menu/puzzle-menu';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport PuzzleSetting from './puzzle-setting/puzzle-setting';\r\nimport puzzleScoreBoard from './puzzle-score-board/puzzle-score-board';\r\n\r\nexport default class PuzzlePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Switch>\r\n              <Route path=\"/puzzle\" exact component={PuzzleMenu} />\r\n              <Route path=\"/puzzle/game\" exact component={PuzzleGrid} />\r\n              <Route path=\"/puzzle/setting\" exact component={PuzzleSetting} />\r\n              <Route path=\"/puzzle/score-board\" exact component={puzzleScoreBoard} />\r\n            </Switch>\r\n          </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport PuzzlePage from 'pages/puzzle-page/puzzle-page';\r\n\r\nconst PuzzlePageRoute = () => {\r\n  return (\r\n    <Route path=\"/puzzle\" component={PuzzlePage} />\r\n  )\r\n}\r\n\r\nexport default PuzzlePageRoute;","import React from 'react';\r\nimport './home-page.scss';\r\n\r\nexport default class HomePage extends React.Component {  \r\n  render() {   \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <h1>HomePage</h1>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\nimport HomePage from 'pages/home-page/home-page';\r\nimport { GuardedRoute } from 'react-router-guards';\r\nconst HomePageRoute = () => {\r\n  return (\r\n    <GuardedRoute path=\"/\" exact component={HomePage} meta={{AUTH_ONLY: true}} />\r\n  )\r\n}\r\n\r\nexport default HomePageRoute;","import React from 'react';\r\nimport './clock.scss';\r\n\r\nexport default class Clock extends React.Component {\r\n  render() {    \r\n    const hour = this.props.hour\r\n    const minute = this.props.minute\r\n    const second = this.props.second\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"clock-wrapper\">\r\n          <div className=\"clock\">\r\n            <div className=\"hand hour-hand\" style={{transform: `rotate(${hour*30 + minute/2 + second/120 - 90}deg)`}}></div>\r\n            <div className=\"hand minute-hand\" style={{transform: `rotate(${minute*6 + second/10 - 90}deg)`}}></div>\r\n            <div className=\"hand second-hand\" style={{transform: `rotate(${second*6 - 90}deg)`}}></div>\r\n          </div>         \r\n        </div>\r\n        <div className=\"timer\">{hour}:{minute < 10 ? '0' + minute : minute}:{second < 10 ? '0' + second : second}</div>       \r\n      </div>      \r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\n\r\nimport './clock-page.scss';\r\nimport Clock from './clock/clock';\r\n\r\nexport default class ClockPage extends React.Component {\r\n  _isMounted = false;\r\n  clock;\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      time: new Date()\r\n    }    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.clock = setInterval(()=> {\r\n        this.setState(state => state.time = new Date())\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    clearInterval(this.clock);\r\n  }\r\n\r\n  render() {        \r\n    const hour = this.state.time.getHours()\r\n    const minute = this.state.time.getMinutes()\r\n    const second = this.state.time.getSeconds()\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Clock \r\n            hour={hour} \r\n            minute={minute} \r\n            second={second} \r\n          />          \r\n        </header>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport ClockPage from 'pages/clock-page/clock-page';\r\n\r\nconst ClockPageRoute = () => {\r\n  return (\r\n    <Route path=\"/clock\" component={ClockPage} />\r\n  )\r\n}\r\n\r\nexport default ClockPageRoute;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './login-page.scss';\r\nimport history from 'services/history.service';\r\nimport { connect } from 'react-redux';\r\nimport { loginAction } from 'actions/auth-action';\r\n\r\nclass LoginPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.login = this.login.bind(this);\r\n  } \r\n\r\n  login() {    \r\n    this.props.loginAction();\r\n    history.push('/')        \r\n  };\r\n\r\n  render() {     \r\n    if (this.props.isLoggedIn) {\r\n      return <Redirect to=\"/\" />\r\n    }   \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <button onClick={this.login}>Log in</button>\r\n      </div>\r\n    );    \r\n  }  \r\n}\r\n\r\nLoginPage.propTypes = {  \r\n  loginAction: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.auth.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps, { loginAction })(LoginPage);","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport LoginPage from 'pages/login-page/login-page';\r\n\r\nconst LoginPageRoute = () => {\r\n  return (\r\n    <Route path=\"/login\" component={LoginPage} />\r\n  )\r\n}\r\n\r\nexport default LoginPageRoute;","import React from 'react';\r\nimport { requireLogin } from 'router/guards';\r\nimport { GuardProvider } from 'react-router-guards';\r\nimport history from 'services/history.service';\r\nimport { Switch } from 'react-router-dom';\r\nimport { Router } from \"react-router\";\r\nimport Nav from 'components/nav/nav';\r\nimport PuzzlePageRoute from 'pages/puzzle-page/puzzle-page-route'\r\nimport HomePageRoute from 'pages/home-page/home-page-route'\r\nimport ClockPageRoute from 'pages/clock-page/clock-page-route'\r\nimport LoginPageRoute from 'pages/login-page/login-page-route';\r\n\r\nconst GLOBAL_GUARDS = [requireLogin];\r\nconst MainRouter = () => {\r\n  return (\r\n    <Router basename={`${process.env.PUBLIC_URL}/`} history={history}>\r\n      <Nav />\r\n      <GuardProvider guards={GLOBAL_GUARDS} loading=\"Loading...\" >\r\n        <Switch>\r\n          {HomePageRoute()}\r\n          {ClockPageRoute()}\r\n          {PuzzlePageRoute()}\r\n          {LoginPageRoute()}\r\n        </Switch>\r\n      </GuardProvider>          \r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default MainRouter;","import {LOGIN, LOGOUT} from 'actions/type';\r\nimport { getIsLoggedIn } from 'utils';\r\n\r\nconst initialState = {\r\n  isLoggedIn: getIsLoggedIn()\r\n}\r\n\r\nexport default function(state = initialState, action) {  \r\n  switch (action.type) {\r\n    case LOGIN:      \r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","const initialState = {\r\n  isWin: false,\r\n  gameLevel: {\r\n    level: 'Normal',\r\n    emptySlotQuantity: 2,\r\n    arraySize: 3\r\n  },\r\n  winningInfo: []\r\n}\r\n\r\nconst changeLevel = (level) => {\r\n  switch (level) {\r\n    case 'Easy':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 3,\r\n        arraySize: 3\r\n      }\r\n    case 'Normal':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 2,\r\n        arraySize: 3\r\n      }\r\n    case 'Hard':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 1,\r\n        arraySize: 3\r\n      }\r\n    default:\r\n      return {\r\n        level: 2,\r\n        emptySlotQuantity: 2,\r\n        arraySize: 3\r\n      }\r\n  }\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'broadcastWinning':\r\n      return {\r\n        ...state,\r\n        isWin: action.isWin\r\n      };\r\n    case 'changeGameLevel':\r\n      return {\r\n        ...state,\r\n        gameLevel: changeLevel(action.level)\r\n      };\r\n    case 'getWinningInfo':\r\n      console.log(state.winningInfo);\r\n      console.log(action.winningInfo);\r\n      return {\r\n        ...state,\r\n        winningInfo: [...state.winningInfo, action.winningInfo]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import { combineReducers } from 'redux';\r\nimport authReducer from './auth-reducer'\r\nimport puzzleReducer from './puzzle-reducer'\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  puzzle: puzzleReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from 'reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst devTools = process.env.NODE_ENV === 'prod' ? null :\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(\r\n  rootReducer, \r\n  initialState, \r\n  compose(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport './App.scss';\nimport { Provider} from 'react-redux';\nimport { MainRouter } from 'router';\nimport store from 'store/store';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"component-wrapper\">\n        <Provider store={store}>          \n          <MainRouter />\n        </Provider>        \n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}