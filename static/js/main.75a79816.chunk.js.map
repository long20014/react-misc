{"version":3,"sources":["utils/constants.js","utils/getIsLoggedIn.js","router/guards/requireLogin.js","services/history.service.js","components/nav/nav.jsx","actions/auth-action.js","actions/type.js","pages/puzzle-page/puzzle-piece/puzzle-piece.jsx","pages/puzzle-page/puzzle-grid-slot/puzzle-grid-slot.jsx","pages/puzzle-page/puzzle-swap-count/puzzle-swap-count.jsx","components/timer/timer.jsx","shared/constants.js","services/grid.service.js","pages/puzzle-page/puzzle-grid/puzzle-grid.jsx","actions/puzzle-action.js","pages/puzzle-page/puzzle-menu/puzzle-menu.jsx","pages/puzzle-page/puzzle-setting/puzzle-setting.jsx","pages/puzzle-page/puzzle-score-board/puzzle-score-board.jsx","pages/puzzle-page/puzzle-page.jsx","pages/puzzle-page/puzzle-page-route.js","pages/home-page/home-page.jsx","pages/home-page/home-page-route.js","pages/clock-page/clock/clock.jsx","pages/clock-page/clock-page.jsx","pages/clock-page/clock-page-route.js","pages/login-page/login-page.jsx","pages/login-page/login-page-route.js","actions/card-action.js","pages/card-page/card-piece/card-piece.jsx","pages/card-page/card-grid-slot/card-grid-slot.jsx","pages/card-page/counter/counter.jsx","services/card-grid.service.js","pages/card-page/card-grid/card-grid.jsx","pages/card-page/card-menu/card-menu.jsx","pages/card-page/card-setting/card-setting.jsx","pages/card-page/card-score-board/card-score-board.jsx","pages/card-page/card-page.jsx","pages/card-page/card-page-route.js","router/main-router.js","reducers/auth-reducer.js","reducers/puzzle-reducer.js","reducers/card-reducer.js","reducers/index.js","store/store.js","App.jsx","serviceWorker.js","index.js"],"names":["STORAGE_KEYS","Object","freeze","IS_LOGGED_IN","getIsLoggedIn","localStorage","getItem","requireLogin","to","from","next","meta","redirect","createBrowserHistory","pURL","process","Nav","props","logout","bind","this","logoutAction","history","push","isLoggedIn","className","onClick","style","color","React","Component","propsType","PropTypes","func","isRequired","connect","state","auth","dispatch","removeItem","type","PuzzlePiece","id","draggable","PuzzleGridSlot","pieceId","key","createPuzzlePiece","PuzzleSwapCount","_isMounted","_stopSubscribe","subscribeCount","updateCount","count","setState","subscribeTimer","swapChanceCount","startSubscribe","setInterval","setTimeout","Timer","_isStopped","subscribeStop","updateStop","stop","stopTimer","emitTime","time","isOn","start","startTimer","resetTimer","upTimingFunc","Date","now","timer","clearInterval","upTimer","Math","floor","constants","GRID_SIZE_LV1","height","width","GRID_SIZE_LV2","getIdNumber","item","split","getIdNumbers","items","ids","forEach","getPieceIdSet","gridSize","emptySlotQuantity","pieceIdSet","i","getRandomPieceId","splicePos","random","length","splice","findEmptySlots","slots","emptySlots","slot","hasChildNodes","coloringEmptySlots","emptySlot","backgroundColor","transformSlots","arraySize","transformedSlots","emptySlotIds","slotId","draggableChecked","includes","isAdjacent","firstElementChild","comparedSlot","comparedSlotId","swapPieces","slot1","slot2","slot1Copy","cloneNode","slot2Copy","replaceChild","childNodes","appendChild","GridService","gridService","gridSlotSize","HorizontalGaps","VerticalGaps","gridStyle","gridTemplateColumns","gridTemplateRows","gridGap","border","PuzzleGrid","emptySlotBg","slotBg","hoveredSlotBg","isWin","subscribeWinning","callback","getEmittedTime","emittedTime","console","log","winningInfo","playedTime","playerName","level","gameLevel","getWinningInfo","announceWinning","getSwapChanceCount","gameSettings","nextProps","nextState","isUpdated","initDraggingEnvironment","restartGame","emptySlotId","createEmptySlotIds","gridSlots","Array","document","querySelectorAll","puzzlePieces","draggedItem","originalSlot","piece","addEventListener","parentElement","display","slotOriginalColor","e","preventDefault","draggedSlot","parentNode","draggedSlotId","append","checkWiningCondition","swapSuccess","winningCount","child","childId","broadcastWinning","alert","createGridSlots","map","puzzle","info","PuzzleMenu","PuzzleSetting","change","event","changeGameLevel","target","value","htmlFor","marginRight","name","onChange","PuzzleScoreBoard","index","indexOf","PuzzlePage","path","exact","component","puzzleScoreBoard","PuzzlePageRoute","HomePage","HomePageRoute","AUTH_ONLY","Clock","hour","minute","second","transform","ClockPage","clock","getHours","getMinutes","getSeconds","ClockPageRoute","LoginPage","login","loginAction","setItem","LoginPageRoute","increaseCount","CardPiece","flipCardUp","openedPair","getElementsByClassName","getAttribute","card1","card2","classList","remove","number","arr","steps","concat","unmatchedSlots","children","firstChild","contains","shiftArrayToLeft","removeChild","cardPiece","querySelector","isWaiting","add","increaseMoveCount","moveCount","isEven","isPairMatching","increaseMatchedPairCount","matchedPairs","disableFlip","setWait","flipCardsDown","changeCardsPosition","openedCards","card","countMoves","countMatchedPairs","currentMoveCount","currentMatchedPairs","CardGridSlot","createCardPiece","Counter","label","getRandomPieceName","pieceNames","CardGridService","cardGridService","CardGrid","getMoveCount","getMatchedPairs","CardMenu","CardSetting","CardScoreBoard","CardPage","cardScoreBoard","CardPageRoute","GLOBAL_GUARDS","MainRouter","basename","guards","loading","initialState","changeLevel","combineReducers","action","middleware","thunk","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootReducer","compose","applyMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.75a79816.chunk.js","sourcesContent":["export const STORAGE_KEYS = Object.freeze({\r\n  IS_LOGGED_IN: 'isLoggedIn',\r\n});","import { STORAGE_KEYS } from 'utils/constants';\r\n\r\nconst getIsLoggedIn = () => localStorage.getItem(STORAGE_KEYS.IS_LOGGED_IN) === 'true';\r\n\r\nexport default getIsLoggedIn;\r\n","import { AUTH_ONLY } from 'router/types';\r\nimport { getIsLoggedIn } from 'utils';\r\n\r\nconst requireLogin = (to, from, next) => {\r\n  if (to.meta[AUTH_ONLY] && !getIsLoggedIn()) {\r\n    next.redirect('/login');\r\n  }\r\n  next();\r\n};\r\n\r\nexport default requireLogin;","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from 'react';\r\nimport './nav.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport history from 'services/history.service';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { logoutAction } from 'actions/auth-action';\r\n\r\nconst pURL = process.env.PUBLIC_URL;\r\nclass Nav extends React.Component {\r\n  constructor(props) {\r\n    super(props);    \r\n    this.logout = this.logout.bind(this);\r\n  } \r\n\r\n  logout() {    \r\n    this.props.logoutAction();        \r\n    history.push('/login')\r\n  };\r\n\r\n  render() {\r\n    const isLoggedIn = this.props.isLoggedIn;    \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"nav\">\r\n          <h3>Logo</h3>\r\n          <ul className=\"nav-links\">\r\n            <li>\r\n              <Link to={pURL + \"/\"}>Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to={pURL + \"/clock\"}>Clock</Link>\r\n            </li>\r\n            <li>\r\n              <Link to={pURL + \"/puzzle\"}>Puzzle</Link>\r\n            </li>\r\n            <li>\r\n              <Link to={pURL + \"/card\"}>Card</Link>\r\n            </li>\r\n          </ul>\r\n          {isLoggedIn && <button onClick={this.logout} style={{ color: 'black' }}>Log out</button>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nNav.propsType = {\r\n  logoutAction: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.auth.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps, { logoutAction })(Nav);","import {LOGIN, LOGOUT} from 'actions/type';\r\nimport { STORAGE_KEYS } from 'utils/constants';\r\nimport { getIsLoggedIn } from 'utils';\r\nexport function loginAction() {\r\n  return function(dispatch) {\r\n    localStorage.setItem(STORAGE_KEYS.IS_LOGGED_IN, 'true');\r\n    dispatch({\r\n      type: LOGIN,\r\n      isLoggedIn: getIsLoggedIn()\r\n    })\r\n  }\r\n}\r\n\r\nexport function logoutAction() {\r\n  return function(dispatch) {\r\n    localStorage.removeItem(STORAGE_KEYS.IS_LOGGED_IN);\r\n    dispatch({\r\n      type: LOGOUT,\r\n      isLoggedIn: getIsLoggedIn()\r\n    })\r\n  }\r\n}","export const LOGIN = 'login';\r\nexport const LOGOUT = 'logout'\r\n","import React from 'react';\r\nimport './puzzle-piece.scss';\r\n\r\nexport default class PuzzlePiece extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id={`piece-${this.props.id}`} className=\"puzzle-piece\" draggable={this.props.draggable}>\r\n        <h1>{this.props.id}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PuzzlePiece from '../puzzle-piece/puzzle-piece'\r\nimport './puzzle-grid-slot.scss';\r\n\r\nexport default class PuzzleGridSlot extends React.Component {\r\n\r\n  createPuzzlePiece() {\r\n    const id = this.props.pieceId; \r\n    if (id !== null) {      \r\n      return <PuzzlePiece key={id} id={id} draggable={false}/>\r\n    }    \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div id={`slot-${this.props.id}`} className=\"puzzle-grid__slot\">\r\n        {this.createPuzzlePiece()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-swap-count.scss';\r\n\r\nexport default class PuzzleSwapCount extends React.Component {\r\n  _isMounted = false;\r\n  _stopSubscribe = false;\r\n  subscribeCount = () => {    \r\n    this.props.updateCount((count) => {               \r\n      if (!this._stopSubscribe && count !== this.state.count) {\r\n        this.setState(state => state.count = count)\r\n        if (count === 0) {\r\n          this._stopSubscribe = true; \r\n        } \r\n      }                    \r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      subscribeTimer: 0,\r\n      count: props.swapChanceCount      \r\n    }\r\n    this.startSubscribe.bind(this)    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.startSubscribe();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this._stopSubscribe = true;        \r\n  }\r\n\r\n  startSubscribe() {    \r\n    setInterval(() => this.setState({\r\n      subscribeTimer: this.state.subscribeTimer + 1\r\n    }), 50);\r\n  }\r\n\r\n  render() {    \r\n    if (!this._stopSubscribe) {\r\n      setTimeout(() => this.subscribeCount(), 0)    \r\n    }\r\n                 \r\n    return (     \r\n      <div className={`component-wrapper ${this.props.className}`}>\r\n        <p>Swap chance: {this.state.count}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './timer.scss';\r\n\r\nexport default class Timer extends React.Component {\r\n  _isMounted = false;\r\n  _isStopped = false;\r\n  subscribeStop = () => {\r\n    this.props.updateStop((stop) => {           \r\n      if (stop && !this._isStopped) {\r\n        this.stopTimer();\r\n        this._isStopped = true;\r\n        this.props.emitTime(this.state.time)   \r\n      }                    \r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      time: 0,\r\n      isOn: false,\r\n      start: 0\r\n    }\r\n    this.startTimer = this.startTimer.bind(this)\r\n    this.stopTimer = this.stopTimer.bind(this)\r\n    this.resetTimer = this.resetTimer.bind(this)\r\n    this.upTimingFunc = this.upTimingFunc.bind(this)    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.stopTimer();\r\n  }\r\n  \r\n  startTimer() {\r\n    this.setState({\r\n      isOn: true,\r\n      time: this.state.time,\r\n      start: Date.now() - this.state.time\r\n    })\r\n    this.timer = setInterval(() => this.setState({\r\n      time: Date.now() - this.state.start\r\n    }), 10);\r\n  }\r\n\r\n  stopTimer() {\r\n    this.setState({isOn: false})\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  resetTimer() {\r\n    this.setState({time: 0, isOn: false})\r\n  }\r\n\r\n  upTimingFunc() {\r\n    this.startTimer();\r\n  }\r\n\r\n  downTimingFunc(start) {\r\n\r\n  }\r\n\r\n  render() { \r\n    if (!this._isStopped) {\r\n      setTimeout(() => this.subscribeStop(), 0)    \r\n    }\r\n    \r\n    if (this.props.upTimer) {\r\n      return (\r\n        <div className=\"component-wrapper\">\r\n          \r\n        </div>\r\n      );\r\n    }\r\n    \r\n    let start = (this.state.time === 0) ?\r\n      <button onClick={this.startTimer}>start</button> : null      \r\n    let stop = (this.state.time === 0 || !this.state.isOn) ? null :      \r\n      <button onClick={this.stopTimer}>stop</button>\r\n    let resume = (this.state.time === 0 || this.state.isOn) ? null :      \r\n      <button onClick={this.startTimer}>resume</button>\r\n    let reset = (this.state.time === 0 || this.state.isOn) ? null :      \r\n      <button onClick={this.resetTimer}>reset</button>          \r\n    return (     \r\n      <div className={`component-wrapper ${this.props.className}`}>\r\n        <h3>timer: {(Math.floor(this.state.time / 10) / 100)} s</h3>        \r\n        {/* {start}\r\n        {resume}\r\n        {stop}\r\n        {reset} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const GRID_SIZE_LV1 = {\r\n  height: 3,\r\n  width: 3\r\n}\r\n\r\nconst GRID_SIZE_LV2 = {\r\n  height: 4,\r\n  width: 4\r\n}\r\n\r\nconst constants =  {  \r\n  GRID_SIZE_LV1,\r\n  GRID_SIZE_LV2  \r\n}\r\n\r\n\r\nexport default constants","const GridService = () => {\r\n  return {\r\n    getPieceIdSet,\r\n    getRandomPieceId,\r\n    getIdNumber,\r\n    getIdNumbers,\r\n    findEmptySlots,\r\n    coloringEmptySlots,\r\n    transformSlots,\r\n    isAdjacent,\r\n    swapPieces\r\n  }\r\n};\r\n\r\nconst getIdNumber = (item) => {\r\n  return +(item.id.split('-')[1])\r\n}\r\n\r\nconst getIdNumbers = (items) => {\r\n  const ids = []\r\n  items.forEach(item => {\r\n    const id = getIdNumber(item);\r\n    ids.push(id)\r\n  })\r\n  return ids;\r\n}\r\n\r\nconst getPieceIdSet = (gridSize, emptySlotQuantity = 0) => {\r\n  const pieceIdSet = [];\r\n  for (let i = 0; i < gridSize - emptySlotQuantity; i++) {      \r\n    pieceIdSet.push(i)      \r\n  }\r\n  return pieceIdSet\r\n}\r\n\r\nconst getRandomPieceId = (pieceIdSet) => {       \r\n  const splicePos = Math.floor(Math.random()*100 % pieceIdSet.length)\r\n  const pieceId = pieceIdSet.splice(splicePos, 1)\r\n  return pieceId[0]; \r\n}\r\n\r\nconst findEmptySlots = (slots) => {    \r\n  let emptySlots = [];\r\n  slots.forEach(slot => {\r\n    if (!slot.hasChildNodes()) {\r\n      emptySlots.push(slot);        \r\n    }\r\n  })\r\n  return emptySlots;\r\n}\r\n\r\nconst coloringEmptySlots = (emptySlots, color) => {\r\n  emptySlots.forEach(emptySlot => emptySlot.style.backgroundColor = color);  \r\n}\r\n\r\nconst transformSlots = (slots, emptySlots, arraySize) => {    \r\n  const transformedSlots = [];\r\n  const emptySlotIds = getIdNumbers(emptySlots);\r\n\r\n  slots.forEach(slot => {\r\n    const slotId = getIdNumber(slot);\r\n    let draggableChecked = false;     \r\n    emptySlots.forEach(emptySlot => {\r\n      if (!emptySlotIds.includes(slotId) && !draggableChecked) { \r\n        if (isAdjacent(slot, emptySlot, arraySize)) {\r\n          slot.firstElementChild.draggable = true;\r\n          draggableChecked = true;       \r\n        }\r\n        else {\r\n          slot.firstElementChild.draggable = false;  \r\n        }  \r\n      }         \r\n    });   \r\n    transformedSlots.push(slot);\r\n  })\r\n  return transformedSlots;\r\n}\r\n\r\nconst isAdjacent = (slot, comparedSlot, arraySize) => {  \r\n  const slotId = getIdNumber(slot);\r\n  const comparedSlotId = getIdNumber(comparedSlot);  \r\n  if ((slotId === comparedSlotId + 1 && Math.floor(slotId/arraySize) === Math.floor(comparedSlotId/arraySize)) ||\r\n    (slotId === comparedSlotId - 1 && Math.floor(slotId/arraySize) === Math.floor(comparedSlotId/arraySize)) ||\r\n    slotId === comparedSlotId + arraySize ||\r\n    slotId === comparedSlotId - arraySize) \r\n  {\r\n    return true;\r\n  }\r\n  return false\r\n}\r\n\r\nconst swapPieces = (slot1, slot2, arraySize) => {  \r\n  if (slot1.hasChildNodes && slot2.hasChildNodes && isAdjacent(slot1, slot2, arraySize)) {\r\n    const slot1Copy = slot1.cloneNode(true);\r\n    const slot2Copy = slot2.cloneNode(true);      \r\n    slot1Copy.replaceChild(slot1.firstElementChild, slot1Copy.childNodes[0])\r\n    slot2Copy.replaceChild(slot2.firstElementChild, slot2Copy.childNodes[0])\r\n    slot1.appendChild(slot2Copy.firstElementChild)\r\n    slot2.appendChild(slot1Copy.firstElementChild)\r\n    return true;\r\n  }\r\n  return false\r\n}\r\n\r\nexport default GridService;","import React from 'react';\r\nimport './puzzle-grid.scss';\r\nimport PuzzleGridSlot from '../puzzle-grid-slot/puzzle-grid-slot';\r\nimport PuzzleSwapCount from '../puzzle-swap-count/puzzle-swap-count'\r\nimport Timer from 'components/timer/timer';\r\nimport constants from 'shared/constants';\r\nimport * as _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { broadcastWinning, restartGame, getWinningInfo } from 'actions/puzzle-action';\r\nimport GridService from 'services/grid.service';\r\n\r\nconst gridService = GridService();\r\n\r\nconst gridSlotSize = (gridSize) => {\r\n  let width = 160\r\n  let height = 160\r\n  if (gridSize.width > 3 || gridSize.height > 3) {\r\n    width = 120\r\n    height = 120 \r\n  }\r\n  return {\r\n    width,\r\n    height\r\n  }  \r\n}\r\n\r\nconst gap = 10;\r\nconst HorizontalGaps = constants.GRID_SIZE_LV1.width * gap\r\nconst VerticalGaps = constants.GRID_SIZE_LV1.height * gap\r\n\r\nconst gridStyle = { \r\n  width: `${constants.GRID_SIZE_LV1.width * gridSlotSize(constants.GRID_SIZE_LV1).width + HorizontalGaps}px`,\r\n  height: `${constants.GRID_SIZE_LV1.height * gridSlotSize(constants.GRID_SIZE_LV1).height + VerticalGaps}px`,  \r\n  gridTemplateColumns: `repeat(${constants.GRID_SIZE_LV1.width}, ${gridSlotSize(constants.GRID_SIZE_LV1).width}px)`,\r\n  gridTemplateRows: `repeat(${constants.GRID_SIZE_LV1.height}, ${gridSlotSize(constants.GRID_SIZE_LV1).height}px)`,\r\n  gridGap: `${gap}px`,\r\n  border: `1px solid wheat`,  \r\n}\r\n\r\nclass PuzzleGrid extends React.Component {\r\n  emptySlotBg = 'rgba(255, 255, 255, 0.3)';\r\n  slotBg = 'rgba(255, 255, 255, 1)';\r\n  hoveredSlotBg = 'rgba(255, 255, 255, .6)';\r\n  swapChanceCount = 1;\r\n  _isMounted = false;\r\n  isWin = false; \r\n  subscribeWinning = (callback) => {\r\n    this.isWin = this.props.isWin;      \r\n    callback(this.isWin);\r\n  }\r\n  getEmittedTime = (emittedTime) => {\r\n    console.log('get time');     \r\n    const winningInfo = {\r\n      playedTime: emittedTime,\r\n      playerName: 'Unknown player',\r\n      level: this.props.gameLevel.level\r\n    }\r\n    this.props.getWinningInfo(winningInfo)\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.announceWinning = this.announceWinning.bind(this);\r\n    this.getSwapChanceCount = this.getSwapChanceCount.bind(this);\r\n    this.gameSettings = {\r\n      emptySlotQuantity: props.gameLevel.emptySlotQuantity,\r\n      arraySize: props.gameLevel.arraySize\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.isUpdated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  componentDidMount() {    \r\n    this.initDraggingEnvironment();   \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.restartGame();\r\n  }\r\n\r\n  createEmptySlotIds(gridSize, emptySlotQuantity) {\r\n    const emptySlotIds = [];\r\n    let count = 0;\r\n    while (count < emptySlotQuantity) {\r\n      const emptySlotId = Math.floor(Math.random()*100 % gridSize);\r\n      if (emptySlotIds.includes(emptySlotId)) {\r\n        continue;\r\n      }\r\n      emptySlotIds.push(emptySlotId)\r\n      count++; \r\n    }\r\n    return emptySlotIds;    \r\n  }\r\n\r\n  createGridSlots(emptySlotQuantity) {\r\n    const slots = [];\r\n    const gridSize = constants.GRID_SIZE_LV1.height * constants.GRID_SIZE_LV1.width;\r\n    const emptySlotIds = this.createEmptySlotIds(gridSize, emptySlotQuantity);\r\n    const pieceIdSet = gridService.getPieceIdSet(gridSize, emptySlotQuantity);    \r\n    for (let i = 0; i < gridSize; i++) {\r\n      let pieceId = null;\r\n      if (!emptySlotIds.includes(i)) {\r\n        pieceId = gridService.getRandomPieceId(pieceIdSet);\r\n      }\r\n      slots.push(<PuzzleGridSlot id={i} key={i} pieceId={pieceId} />)\r\n    }\r\n    return slots;\r\n  }\r\n\r\n  getSwapChanceCount(callback) {                   \r\n    callback(this.swapChanceCount)\r\n  }\r\n\r\n  initDraggingEnvironment() {\r\n    let gridSlots = Array.from(document.querySelectorAll('.puzzle-grid__slot'));    \r\n    let emptySlots = gridService.findEmptySlots(gridSlots)    \r\n    let transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);\r\n    const puzzlePieces = Array.from(document.querySelectorAll('.puzzle-piece'));    \r\n    gridService.coloringEmptySlots(emptySlots, this.emptySlotBg)     \r\n    let draggedItem = null;\r\n    let originalSlot = null;\r\n\r\n    puzzlePieces.forEach(piece => {      \r\n      piece.addEventListener('dragstart', () => {\r\n        originalSlot = piece.parentElement;        \r\n        draggedItem = piece;\r\n        setTimeout(() => {\r\n          draggedItem.style.display = 'none';\r\n        })\r\n      });\r\n      \r\n      piece.addEventListener('dragend', () => {       \r\n        setTimeout(() => {          \r\n          draggedItem.style.display = 'flex';\r\n          draggedItem = null\r\n        })\r\n      });  \r\n      \r\n      gridSlots.forEach(slot => {\r\n        const slotOriginalColor = slot.style.backgroundColor;\r\n\r\n        slot.addEventListener('dragover', (e) => {\r\n          e.preventDefault();          \r\n        });\r\n\r\n        slot.addEventListener('dragenter', (e) => {\r\n          e.preventDefault();\r\n          if (originalSlot.id !== slot.id && !slot.hasChildNodes()) {\r\n            slot.style.backgroundColor = this.hoveredSlotBg;          \r\n          }                \r\n        });\r\n\r\n        slot.addEventListener('dragleave', (e) => {\r\n          e.preventDefault();\r\n          const emptySlotIds = gridService.getIdNumbers(emptySlots);\r\n          const slotId = gridService.getIdNumber(slot)\r\n          if (!emptySlotIds.includes(slotId)) {\r\n            slot.style.backgroundColor = this.slotBg;   \r\n          }\r\n          else {\r\n            slot.style.backgroundColor = this.emptySlotBg  \r\n          }                 \r\n        });\r\n        \r\n        slot.addEventListener('drop', (e) => {          \r\n          const draggedSlot = draggedItem.parentNode;          \r\n          const slotId = gridService.getIdNumber(slot)\r\n          const draggedSlotId = gridService.getIdNumber(draggedSlot)     \r\n          if (!slot.hasChildNodes() && gridService.isAdjacent(slot, draggedSlot, this.gameSettings.arraySize)) { \r\n            draggedItem.style.display = 'flex';           \r\n            slot.append(draggedItem)            \r\n            slot.style.backgroundColor = this.slotBg\r\n            gridSlots = Array.from(document.querySelectorAll('.puzzle-grid__slot'));    \r\n            emptySlots = gridService.findEmptySlots(gridSlots)\r\n            gridService.coloringEmptySlots(emptySlots, this.emptySlotBg)    \r\n            transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);            \r\n            setTimeout(() => {\r\n              if (this.checkWiningCondition(transformedSlots, emptySlots)) {\r\n                this.announceWinning();\r\n              }              \r\n            }, 100)            \r\n          }\r\n          else if (slot.hasChildNodes() && this.swapChanceCount > 0) {            \r\n            const swapSuccess = gridService.swapPieces(draggedSlot, slot, this.gameSettings.arraySize)\r\n            slot.firstElementChild.style.display = 'flex';\r\n            transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);\r\n            if (swapSuccess) {\r\n              this.swapChanceCount--;\r\n            } \r\n          }\r\n          else if (slotId !== draggedSlotId) {\r\n            slot.style.backgroundColor = slotOriginalColor;\r\n          }          \r\n        });         \r\n      })\r\n    });\r\n  }\r\n\r\n  checkWiningCondition(gridSlots, emptySlots) {\r\n    let count = 0;\r\n    const winningCount = gridSlots.length - emptySlots.length;       \r\n    gridSlots.forEach(slot => {\r\n      const child = slot.firstElementChild;\r\n      const slotId = gridService.getIdNumber(slot);\r\n      let childId = null;\r\n      if (child) {\r\n        childId = gridService.getIdNumber(child)\r\n      }\r\n      if (slotId === childId) {\r\n        count++;\r\n      }\r\n    })       \r\n    if (count === winningCount) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  announceWinning() {\r\n    this.props.broadcastWinning();    \r\n    setTimeout(() => {\r\n      console.log('You win the game', this.props.isWin);\r\n      alert('Congratulation! You win the game')  \r\n    }, 100)      \r\n  }\r\n  \r\n  render() {    \r\n    const gridSlots = this.createGridSlots(this.gameSettings.emptySlotQuantity);    \r\n    return (\r\n      <div className=\"component-wrapper puzzle-wrapper\">\r\n        <div className=\"puzzle-grid\" style={gridStyle}>\r\n          {gridSlots.map(item => item)}\r\n        </div>\r\n        <Timer className={'timer-pos'} \r\n          stop={this.isWin} \r\n          updateStop={this.subscribeWinning} \r\n          emitTime={this.getEmittedTime}\r\n        />\r\n        <PuzzleSwapCount className={'text-pos'} updateCount={this.getSwapChanceCount} swapChanceCount={this.swapChanceCount}/>\r\n        {/* <button onClick={this.announceWinning}>Win</button> */}\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n\r\nPuzzleGrid.propsType = {\r\n  broadcastWinning: PropTypes.func.isRequired,\r\n  restartGame: PropTypes.func.isRequired,\r\n  getWinningInfo: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  isWin: state.puzzle.isWin,\r\n  gameLevel: state.puzzle.gameLevel\r\n})\r\n\r\nexport default connect(mapStateToProps, { broadcastWinning, restartGame, getWinningInfo })(PuzzleGrid);","\r\nexport function broadcastWinning() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: true\r\n    })\r\n  }\r\n}\r\n\r\nexport function restartGame() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: false\r\n    })\r\n  }\r\n}\r\n\r\nexport function changeGameLevel(level) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'changeGameLevel',\r\n      level\r\n    })\r\n  }\r\n}\r\n\r\nexport function getWinningInfo(info) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'getWinningInfo',\r\n      winningInfo: info\r\n    })\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-menu.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class PuzzleMenu extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <ul className=\"puzzle-menu\">\r\n          <li>\r\n            <Link to=\"/puzzle/game\">Start Game</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/puzzle/score-board\">Score Board</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/puzzle/setting\">Setting</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-setting.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { changeGameLevel } from 'actions/puzzle-action';\r\n\r\nclass PuzzleSetting extends React.Component {  \r\n  change = (event) => {    \r\n    this.props.changeGameLevel(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"puzzle-setting\">\r\n          <div className=\"setting-option-wrapper\">\r\n            <label htmlFor=\"level\" style={{marginRight: '10px'}}>Game Level:</label>\r\n            <select name=\"level\" id=\"level\" onChange={this.change} value={this.props.level}>\r\n              <option value=\"Easy\">Easy</option>\r\n              <option value=\"Normal\">Normal</option>\r\n              <option value=\"Hard\">Hard</option>\r\n            </select> \r\n          </div>\r\n                   \r\n          <li>\r\n            <Link to=\"/puzzle\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPuzzleSetting.propsType = {  \r\n  changeGameLevel: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  level: state.puzzle.gameLevel.level\r\n})\r\n\r\nexport default connect(mapStateToProps, { changeGameLevel })(PuzzleSetting);\r\n","import React from 'react';\r\nimport './puzzle-score-board.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass PuzzleScoreBoard extends React.Component {  \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"puzzle-menu\">\r\n          {this.props.winningInfo.map((info) => {\r\n            const index = this.props.winningInfo.indexOf(info)\r\n            return(\r\n              <p key={index}>{index+1}. {info.playerName}: {+info.playedTime/1000}s ({info.level})</p>\r\n            ) \r\n          })}          \r\n          <li>\r\n            <Link to=\"/puzzle\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  winningInfo: state.puzzle.winningInfo\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(PuzzleScoreBoard);\r\n","import React from 'react';\r\nimport './puzzle-page.scss';\r\nimport PuzzleGrid from './puzzle-grid/puzzle-grid';\r\nimport PuzzleMenu from './puzzle-menu/puzzle-menu';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport PuzzleSetting from './puzzle-setting/puzzle-setting';\r\nimport puzzleScoreBoard from './puzzle-score-board/puzzle-score-board';\r\n\r\nexport default class PuzzlePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Switch>\r\n              <Route path=\"/puzzle\" exact component={PuzzleMenu} />\r\n              <Route path=\"/puzzle/game\" exact component={PuzzleGrid} />\r\n              <Route path=\"/puzzle/setting\" exact component={PuzzleSetting} />\r\n              <Route path=\"/puzzle/score-board\" exact component={puzzleScoreBoard} />\r\n            </Switch>\r\n          </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport PuzzlePage from 'pages/puzzle-page/puzzle-page';\r\n\r\nconst PuzzlePageRoute = () => {\r\n  return (\r\n    <Route path=\"/puzzle\" component={PuzzlePage} />\r\n  )\r\n}\r\n\r\nexport default PuzzlePageRoute;","import React from 'react';\r\nimport './home-page.scss';\r\n\r\nexport default class HomePage extends React.Component {  \r\n  render() {   \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <h1>HomePage</h1>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\nimport HomePage from 'pages/home-page/home-page';\r\nimport { GuardedRoute } from 'react-router-guards';\r\nconst HomePageRoute = () => {\r\n  return (\r\n    <GuardedRoute path=\"/\" exact component={HomePage} meta={{AUTH_ONLY: true}} />\r\n  )\r\n}\r\n\r\nexport default HomePageRoute;","import React from 'react';\r\nimport './clock.scss';\r\n\r\nexport default class Clock extends React.Component {\r\n  render() {    \r\n    const hour = this.props.hour\r\n    const minute = this.props.minute\r\n    const second = this.props.second\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"clock-wrapper\">\r\n          <div className=\"clock\">\r\n            <div className=\"hand hour-hand\" style={{transform: `rotate(${hour*30 + minute/2 + second/120 - 90}deg)`}}></div>\r\n            <div className=\"hand minute-hand\" style={{transform: `rotate(${minute*6 + second/10 - 90}deg)`}}></div>\r\n            <div className=\"hand second-hand\" style={{transform: `rotate(${second*6 - 90}deg)`}}></div>\r\n          </div>         \r\n        </div>\r\n        <div className=\"timer\">{hour}:{minute < 10 ? '0' + minute : minute}:{second < 10 ? '0' + second : second}</div>       \r\n      </div>      \r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\n\r\nimport './clock-page.scss';\r\nimport Clock from './clock/clock';\r\n\r\nexport default class ClockPage extends React.Component {\r\n  _isMounted = false;\r\n  clock;\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      time: new Date()\r\n    }    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.clock = setInterval(()=> {\r\n        this.setState(state => state.time = new Date())\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    clearInterval(this.clock);\r\n  }\r\n\r\n  render() {        \r\n    const hour = this.state.time.getHours()\r\n    const minute = this.state.time.getMinutes()\r\n    const second = this.state.time.getSeconds()\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Clock \r\n            hour={hour} \r\n            minute={minute} \r\n            second={second} \r\n          />          \r\n        </header>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport ClockPage from 'pages/clock-page/clock-page';\r\n\r\nconst ClockPageRoute = () => {\r\n  return (\r\n    <Route path=\"/clock\" component={ClockPage} />\r\n  )\r\n}\r\n\r\nexport default ClockPageRoute;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './login-page.scss';\r\nimport history from 'services/history.service';\r\nimport { connect } from 'react-redux';\r\nimport { loginAction } from 'actions/auth-action';\r\n\r\nclass LoginPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.login = this.login.bind(this);\r\n  } \r\n\r\n  login() {    \r\n    this.props.loginAction();\r\n    history.push('/')        \r\n  };\r\n\r\n  render() {     \r\n    if (this.props.isLoggedIn) {\r\n      return <Redirect to=\"/\" />\r\n    }   \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <button onClick={this.login}>Log in</button>\r\n      </div>\r\n    );    \r\n  }  \r\n}\r\n\r\nLoginPage.propTypes = {  \r\n  loginAction: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.auth.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps, { loginAction })(LoginPage);","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport LoginPage from 'pages/login-page/login-page';\r\n\r\nconst LoginPageRoute = () => {\r\n  return (\r\n    <Route path=\"/login\" component={LoginPage} />\r\n  )\r\n}\r\n\r\nexport default LoginPageRoute;","export function increaseMoveCount(currentMoveCount) {\r\n  return function(dispatch) {        \r\n    dispatch({\r\n      type: 'increaseMoveCount',\r\n      moveCount: increaseCount(currentMoveCount),      \r\n    })\r\n  }\r\n}\r\n\r\nexport function increaseMatchedPairCount(currentMatchedPairs) {\r\n  return function(dispatch) {        \r\n    dispatch({\r\n      type: 'increaseMatchedPairCount',\r\n      matchedPairs: increaseCount(currentMatchedPairs),      \r\n    })\r\n  }\r\n}\r\n\r\nexport function setWait(isWaiting) {\r\n  return function(dispatch) {        \r\n    dispatch({\r\n      type: 'setWait',\r\n      isWaiting,      \r\n    })\r\n  }\r\n}\r\n\r\nexport function broadcastWinning() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: true\r\n    })\r\n  }\r\n}\r\n\r\nexport function restartGame() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'restartGame',\r\n      isWin: false,\r\n      moveCount: 0,\r\n      matchedPairs: 0,\r\n    })\r\n  }\r\n}\r\n\r\nexport function changeGameLevel(level) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'changeGameLevel',\r\n      level\r\n    })\r\n  }\r\n}\r\n\r\nexport function getWinningInfo(info) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'getWinningInfo',\r\n      winningInfo: info\r\n    })\r\n  }\r\n}\r\n\r\nfunction increaseCount(count) {\r\n  return ++count;\r\n}\r\n","import React from 'react';\r\nimport './card-piece.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { increaseMatchedPairCount, setWait, increaseMoveCount, broadcastWinning } \r\n  from 'actions/card-action';\r\n\r\nclass CardPiece extends React.Component {\r\n  constructor(props) {\r\n    super()    \r\n    this.flipCardUp = this.flipCardUp.bind(this); \r\n    this.checkWiningCondition = this.checkWiningCondition.bind(this);   \r\n    this.announceWinning = this.announceWinning.bind(this);   \r\n  }\r\n\r\n  componentDidMount() {    \r\n   \r\n  }\r\n\r\n  isPairMatching() { \r\n    const openedPair = document.getElementsByClassName('flip-up unmatched');\r\n    const card1Name = openedPair[0].getAttribute(\"name\");\r\n    const card2Name = openedPair[1].getAttribute(\"name\");\r\n    if (card1Name === card2Name) {\r\n      return true\r\n    }\r\n    return false;       \r\n  }\r\n\r\n  disableFlip() {    \r\n    const openedPair = document.getElementsByClassName('flip-up unmatched');\r\n    const card1 = openedPair[0];\r\n    const card2 = openedPair[1];\r\n    card1.classList.remove('unmatched')  \r\n    card2.classList.remove('unmatched')  \r\n  }\r\n\r\n  isEven(number) {\r\n    return number % 2 === 0;\r\n  }\r\n\r\n  shiftArrayToLeft(arr, steps) {    \r\n    arr = arr.concat(arr.splice(0, steps)); \r\n    return arr;    \r\n  }\r\n\r\n  changeCardsPosition() {\r\n    const slots = document.getElementsByClassName('card-grid__slot');\r\n    const unmatchedSlots = [];\r\n    let children = [];\r\n    for (const slot of slots) {\r\n      const child = slot.firstChild;\r\n      if (child.classList.contains('unmatched')) {\r\n        children.push(child);\r\n        unmatchedSlots.push(slot);\r\n      }      \r\n    }\r\n    children = this.shiftArrayToLeft(children, 2);\r\n    for (let i = 0; i < unmatchedSlots.length; i++) {   \r\n      const slot = unmatchedSlots[i];      \r\n      const firstChild = slot.firstChild;\r\n      console.log('before:', firstChild);  \r\n      if (firstChild) {\r\n        slot.removeChild(firstChild)\r\n      }       \r\n      slot.appendChild(children[i]);\r\n      console.log('after:', unmatchedSlots[i].firstChild);    \r\n    }     \r\n  }\r\n\r\n  flipCardUp() {\r\n    const cardPiece = document.querySelector(`#piece-${this.props.id}`);  \r\n    if (cardPiece.classList.contains('unmatched') && !this.props.isWaiting) {      \r\n      if (!cardPiece.classList.contains('flip-up')) {       \r\n        cardPiece.classList.add('flip-up');\r\n        this.props.increaseMoveCount(this.props.moveCount)           \r\n        if (this.isEven(this.props.moveCount+1)) {\r\n          if(this.isPairMatching()) {\r\n            this.props.increaseMatchedPairCount(this.props.matchedPairs)\r\n            this.disableFlip();            \r\n            if (this.checkWiningCondition()) {\r\n              this.announceWinning();\r\n            }\r\n          }\r\n          else {\r\n            this.props.setWait(true);\r\n            setTimeout(() => this.flipCardsDown(), 1000);           \r\n          }\r\n          if (this.props.gameLevel.level === 'Hard') {\r\n            setTimeout(() => this.changeCardsPosition(), 1001);\r\n          }          \r\n        }        \r\n      }\r\n    }           \r\n  }  \r\n\r\n  flipCardsDown() {    \r\n    const openedCards = [...document.getElementsByClassName('flip-up unmatched')];\r\n    for (const card of openedCards) {\r\n      if (card.classList.contains('unmatched')) {      \r\n        if (card.classList.contains('flip-up')) {\r\n          card.classList.remove('flip-up');\r\n        }\r\n      }\r\n    }    \r\n    this.props.setWait(false);   \r\n  }\r\n\r\n  checkWiningCondition() {\r\n    const arraySize = this.props.gameLevel.arraySize;\r\n    if (this.props.matchedPairs+1 === arraySize*arraySize/2) {\r\n      return true\r\n    }\r\n    return false;\r\n  }\r\n\r\n  announceWinning() {\r\n    this.props.broadcastWinning();    \r\n    setTimeout(() => {\r\n      console.log('You win the game', this.props.isWin);\r\n      alert('Congratulation! You win the game')  \r\n    }, 100)      \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper card-wrapper h-full unmatched\" name={this.props.name} \r\n        id={`piece-${this.props.id}`} onClick={this.flipCardUp}>\r\n        <div id={`piece-${this.props.id}-front`} className=\"card-piece card-front\">\r\n          <h1>{this.props.name}</h1>\r\n        </div>\r\n        <div id={`piece-${this.props.id}-back`} className=\"card-piece card-back\"></div>\r\n      </div>      \r\n    );\r\n  }\r\n}\r\n\r\nCardPiece.propsType = {\r\n  countMoves: PropTypes.func.isRequired,\r\n  countMatchedPairs: PropTypes.func.isRequired,\r\n  setWait: PropTypes.func.isRequired,\r\n  broadcastWinning: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  moveCount: state.card.moveCount,\r\n  matchedPairs: state.card.matchedPairs,\r\n  isWaiting: state.card.isWaiting,\r\n  gameLevel: state.card.gameLevel\r\n})\r\n\r\nexport default connect(mapStateToProps, { increaseMoveCount, increaseMatchedPairCount, setWait, broadcastWinning })(CardPiece);","import React from 'react';\r\nimport CardPiece from '../card-piece/card-piece'\r\nimport './card-grid-slot.scss';\r\n\r\nexport default class CardGridSlot extends React.Component {\r\n\r\n  createCardPiece() {\r\n    const id = this.props.pieceId;\r\n    const name = this.props.name;\r\n    if (id !== null) {      \r\n      return <CardPiece key={id} id={id} name={name}/>\r\n    }    \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div id={`slot-${this.props.id}`} className=\"card-grid__slot\">\r\n        {this.createCardPiece()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './counter.scss';\r\n\r\nexport default class Counter extends React.Component {\r\n  _isMounted = false;\r\n  _stopSubscribe = false;\r\n  subscribeCount = () => {    \r\n    this.props.updateCount((count) => {               \r\n      if (!this._stopSubscribe && count !== this.state.count) {\r\n        this.setState(state => state.count = count)        \r\n      }                    \r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      subscribeTimer: 0,\r\n      count: props.count      \r\n    }\r\n    this.startSubscribe.bind(this)    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.startSubscribe();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this._stopSubscribe = true;        \r\n  }\r\n\r\n  startSubscribe() {    \r\n    setInterval(() => this.setState({\r\n      subscribeTimer: this.state.subscribeTimer + 1\r\n    }), 50);\r\n  }\r\n\r\n  render() {    \r\n    if (!this._stopSubscribe) {\r\n      setTimeout(() => this.subscribeCount(), 0)    \r\n    }\r\n                 \r\n    return (     \r\n      <div className={`component-wrapper ${this.props.className}`}>\r\n        <p>{this.props.label}: {this.state.count}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const CardGridService = () => {\r\n  return {    \r\n    getRandomPieceName,    \r\n  }\r\n};\r\n\r\nconst getRandomPieceName = (pieceNames) => {       \r\n  const splicePos = Math.floor(Math.random()*100 % pieceNames.length)\r\n  const pieceId = pieceNames.splice(splicePos, 1)\r\n  return pieceId[0]; \r\n}\r\n\r\nexport default CardGridService;","import React from 'react';\r\nimport './card-grid.scss';\r\nimport CardGridSlot from '../card-grid-slot/card-grid-slot';\r\nimport Counter from '../counter/counter'\r\nimport Timer from 'components/timer/timer';\r\nimport constants from 'shared/constants';\r\nimport * as _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { broadcastWinning, restartGame, getWinningInfo } from 'actions/card-action';\r\nimport GridService from 'services/grid.service';\r\nimport CardGridService from 'services/card-grid.service';\r\n\r\nconst gridService = GridService();\r\nconst cardGridService = CardGridService();\r\n\r\nconst gridSlotSize = (gridSize) => {\r\n  let width = 160\r\n  let height = 160\r\n  if (gridSize.width > 3 || gridSize.height > 3) {\r\n    width = 120\r\n    height = 120 \r\n  }\r\n  return {\r\n    width,\r\n    height\r\n  }  \r\n}\r\n\r\nconst gap = 10;\r\nconst HorizontalGaps = constants.GRID_SIZE_LV2.width * gap;\r\nconst VerticalGaps = constants.GRID_SIZE_LV2.height * gap;\r\n\r\nconst gridStyle = { \r\n  width: `${constants.GRID_SIZE_LV2.width * gridSlotSize(constants.GRID_SIZE_LV2).width + HorizontalGaps}px`,\r\n  height: `${constants.GRID_SIZE_LV2.height * gridSlotSize(constants.GRID_SIZE_LV2).height + VerticalGaps}px`,  \r\n  gridTemplateColumns: `repeat(${constants.GRID_SIZE_LV2.width}, ${gridSlotSize(constants.GRID_SIZE_LV2).width}px)`,\r\n  gridTemplateRows: `repeat(${constants.GRID_SIZE_LV2.height}, ${gridSlotSize(constants.GRID_SIZE_LV2).height}px)`,\r\n  gridGap: `${gap}px`,\r\n  border: `1px solid wheat`,  \r\n}\r\n\r\nclass CardGrid extends React.Component {\r\n  emptySlotBg = 'rgba(255, 255, 255, 0.3)';\r\n  slotBg = 'rgba(255, 255, 255, 1)';\r\n  hoveredSlotBg = 'rgba(255, 255, 255, .6)';\r\n  _isMounted = false;\r\n  isWin = false; \r\n  subscribeWinning = (callback) => {\r\n    this.isWin = this.props.isWin;      \r\n    callback(this.isWin);\r\n  }\r\n  getEmittedTime = (emittedTime) => {\r\n    console.log('get time');     \r\n    const winningInfo = {\r\n      playedTime: emittedTime,\r\n      playerName: 'Unknown player',\r\n      level: this.props.gameLevel.level\r\n    }\r\n    this.props.getWinningInfo(winningInfo)\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);    \r\n    this.getMoveCount = this.getMoveCount.bind(this);\r\n    this.getMatchedPairs = this.getMatchedPairs.bind(this);\r\n    this.gameSettings = {\r\n      emptySlotQuantity: props.gameLevel.emptySlotQuantity,\r\n      arraySize: props.gameLevel.arraySize\r\n    }   \r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.isUpdated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  componentDidMount() {    \r\n    \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.restartGame();\r\n  }\r\n\r\n  createGridSlots() {\r\n    const slots = [];\r\n    const gridSize = constants.GRID_SIZE_LV2.height * constants.GRID_SIZE_LV2.width;    \r\n    const pieceIdSet = gridService.getPieceIdSet(gridSize);\r\n    const pieceNames = ['A', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H']    \r\n    for (let i = 0; i < gridSize; i++) {\r\n      const name = cardGridService.getRandomPieceName(pieceNames);\r\n      let pieceId = gridService.getRandomPieceId(pieceIdSet);          \r\n      slots.push(<CardGridSlot id={i} key={i} pieceId={pieceId} name={name}/>)\r\n    }\r\n    return slots;\r\n  } \r\n\r\n  getMoveCount(callback) {                   \r\n    callback(this.props.moveCount)\r\n  } \r\n  \r\n  getMatchedPairs(callback) {                   \r\n    callback(this.props.matchedPairs)\r\n  }\r\n  \r\n  render() {    \r\n    const gridSlots = this.createGridSlots(this.gameSettings.emptySlotQuantity);    \r\n    return (\r\n      <div className=\"component-wrapper card-wrapper\">\r\n        <div className=\"card-grid\" style={gridStyle}>\r\n          {gridSlots.map(item => item)}\r\n        </div>\r\n        {/* <Timer className={'timer-pos'} \r\n          stop={this.isWin} \r\n          updateStop={this.subscribeWinning} \r\n          emitTime={this.getEmittedTime}\r\n        /> */}\r\n        <Counter className={'text-pos'} \r\n          label=\"Moves\"\r\n          updateCount={this.getMoveCount} \r\n          count={this.props.moveCount}/>\r\n        <Counter className={'text-pos-2'} \r\n          label=\"Matches\"\r\n          updateCount={this.getMatchedPairs} \r\n          count={this.props.matchedPairs}/> \r\n      </div>\r\n    );\r\n  }  \r\n}\r\n\r\nCardGrid.propsType = {\r\n  broadcastWinning: PropTypes.func.isRequired,\r\n  restartGame: PropTypes.func.isRequired,\r\n  getWinningInfo: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  isWin: state.card.isWin,\r\n  gameLevel: state.card.gameLevel,\r\n  moveCount: state.card.moveCount,\r\n  matchedPairs: state.card.matchedPairs\r\n})\r\n\r\nexport default connect(mapStateToProps, { broadcastWinning, restartGame, getWinningInfo })(CardGrid);","import React from 'react';\r\nimport './card-menu.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class CardMenu extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <ul className=\"card-menu\">\r\n          <li>\r\n            <Link to=\"/card/game\">Start Game</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/card/score-board\">Score Board</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/card/setting\">Setting</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './card-setting.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { changeGameLevel } from 'actions/card-action';\r\n\r\nclass CardSetting extends React.Component {  \r\n  change = (event) => {    \r\n    this.props.changeGameLevel(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"card-setting\">\r\n          <div className=\"setting-option-wrapper\">\r\n            <label htmlFor=\"level\" style={{marginRight: '10px'}}>Game Level:</label>\r\n            <select name=\"level\" id=\"level\" onChange={this.change} value={this.props.level}>              \r\n              <option value=\"Normal\">Normal</option>\r\n              <option value=\"Hard\">Hard</option>\r\n            </select> \r\n          </div>\r\n                   \r\n          <li>\r\n            <Link to=\"/card\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCardSetting.propsType = {  \r\n  changeGameLevel: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  level: state.card.gameLevel.level\r\n})\r\n\r\nexport default connect(mapStateToProps, { changeGameLevel })(CardSetting);\r\n","import React from 'react';\r\nimport './card-score-board.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass CardScoreBoard extends React.Component {  \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"card-menu\">\r\n          {this.props.winningInfo.map((info) => {\r\n            const index = this.props.winningInfo.indexOf(info)\r\n            return(\r\n              <p key={index}>{index+1}. {info.playerName}: {+info.playedTime/1000}s ({info.level})</p>\r\n            ) \r\n          })}          \r\n          <li>\r\n            <Link to=\"/card\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  winningInfo: state.card.winningInfo\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(CardScoreBoard);\r\n","import React from 'react';\r\nimport './card-page.scss';\r\nimport CardGrid from './card-grid/card-grid';\r\nimport CardMenu from './card-menu/card-menu';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport CardSetting from './card-setting/card-setting';\r\nimport cardScoreBoard from './card-score-board/card-score-board';\r\n\r\nexport default class CardPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Switch>\r\n              <Route path=\"/card\" exact component={CardMenu} />\r\n              <Route path=\"/card/game\" exact component={CardGrid} />\r\n              <Route path=\"/card/setting\" exact component={CardSetting} />\r\n              <Route path=\"/card/score-board\" exact component={cardScoreBoard} />\r\n            </Switch>\r\n          </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport CardPage from 'pages/card-page/card-page';\r\n\r\nconst CardPageRoute = () => {\r\n  return (\r\n    <Route path=\"/card\" component={CardPage} />\r\n  )\r\n}\r\n\r\nexport default CardPageRoute;","import React from 'react';\r\nimport { requireLogin } from 'router/guards';\r\nimport { GuardProvider } from 'react-router-guards';\r\nimport history from 'services/history.service';\r\nimport { Switch } from 'react-router-dom';\r\nimport { Router } from \"react-router\";\r\nimport { HashRouter } from 'react-router-dom';\r\nimport Nav from 'components/nav/nav';\r\nimport PuzzlePageRoute from 'pages/puzzle-page/puzzle-page-route'\r\nimport HomePageRoute from 'pages/home-page/home-page-route'\r\nimport ClockPageRoute from 'pages/clock-page/clock-page-route'\r\nimport LoginPageRoute from 'pages/login-page/login-page-route';\r\nimport CardPageRoute from 'pages/card-page/card-page-route';\r\n\r\nconst GLOBAL_GUARDS = [requireLogin];\r\nconst MainRouter = () => {\r\n  return (\r\n    <HashRouter basename={`${process.env.PUBLIC_URL}/`} history={history}>\r\n      <Nav />\r\n      <GuardProvider guards={GLOBAL_GUARDS} loading=\"Loading...\" >\r\n        <Switch>\r\n          {HomePageRoute()}\r\n          {ClockPageRoute()}\r\n          {PuzzlePageRoute()}\r\n          {CardPageRoute()}\r\n          {LoginPageRoute()}\r\n        </Switch>\r\n      </GuardProvider>          \r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default MainRouter;","import {LOGIN, LOGOUT} from 'actions/type';\r\nimport { getIsLoggedIn } from 'utils';\r\n\r\nconst initialState = {\r\n  isLoggedIn: getIsLoggedIn()\r\n}\r\n\r\nexport default function(state = initialState, action) {  \r\n  switch (action.type) {\r\n    case LOGIN:      \r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","const initialState = {\r\n  isWin: false,\r\n  gameLevel: {\r\n    level: 'Normal',\r\n    emptySlotQuantity: 2,\r\n    arraySize: 3\r\n  },\r\n  winningInfo: []\r\n}\r\n\r\nconst changeLevel = (level) => {\r\n  switch (level) {\r\n    case 'Easy':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 3,\r\n        arraySize: 3\r\n      }\r\n    case 'Normal':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 2,\r\n        arraySize: 3\r\n      }\r\n    case 'Hard':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 1,\r\n        arraySize: 3\r\n      }\r\n    default:\r\n      return {\r\n        level: 2,\r\n        emptySlotQuantity: 2,\r\n        arraySize: 3\r\n      }\r\n  }\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'broadcastWinning':\r\n      return {\r\n        ...state,\r\n        isWin: action.isWin\r\n      };\r\n    case 'changeGameLevel':\r\n      return {\r\n        ...state,\r\n        gameLevel: changeLevel(action.level)\r\n      };\r\n    case 'getWinningInfo':\r\n      console.log(state.winningInfo);\r\n      console.log(action.winningInfo);\r\n      return {\r\n        ...state,\r\n        winningInfo: [...state.winningInfo, action.winningInfo]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","const initialState = {\r\n  moveCount: 0,\r\n  matchedPairs: 0,\r\n  isWaiting: false,\r\n  isWin: false,\r\n  gameLevel: {\r\n    level: 'Normal',    \r\n    arraySize: 4\r\n  },\r\n  winningInfo: []\r\n}\r\n\r\nconst changeLevel = (level) => {\r\n  switch (level) {   \r\n    case 'Normal':\r\n      return {\r\n        level,        \r\n        arraySize: 4\r\n      }\r\n    case 'Hard':\r\n      return {\r\n        level,        \r\n        arraySize: 4\r\n      }\r\n    default:\r\n      return {\r\n        level: 'Normal',        \r\n        arraySize: 4\r\n      }\r\n  }\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'broadcastWinning':\r\n      return {\r\n        ...state,\r\n        isWin: action.isWin\r\n      };\r\n    case 'changeGameLevel':\r\n      return {\r\n        ...state,\r\n        gameLevel: changeLevel(action.level)\r\n      };\r\n    case 'getWinningInfo':\r\n      return {\r\n        ...state,\r\n        winningInfo: [...state.winningInfo, action.winningInfo]\r\n      };\r\n    case 'increaseMoveCount':\r\n      return {\r\n        ...state,\r\n        moveCount: action.moveCount\r\n      };\r\n    case 'setWait':\r\n      return {\r\n        ...state,\r\n        isWaiting: action.isWaiting\r\n      };\r\n    case 'increaseMatchedPairCount':\r\n      return {\r\n        ...state,\r\n        matchedPairs: action.matchedPairs\r\n      };\r\n    case 'restartGame':\r\n      return {\r\n        ...state,\r\n        isWin: action.isWin,\r\n        moveCount: action.moveCount,\r\n        matchedPairs: action.matchedPairs,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import { combineReducers } from 'redux';\r\nimport authReducer from './auth-reducer'\r\nimport puzzleReducer from './puzzle-reducer'\r\nimport cardReducer from './card-reducer';\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  puzzle: puzzleReducer,\r\n  card: cardReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from 'reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst reduxDevTools = process.env.NODE_ENV === 'prod' ? null :\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(\r\n  rootReducer, \r\n  initialState, \r\n  compose(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n\r\n// const storeDev = createStore(\r\n//   rootReducer, \r\n//   initialState, \r\n//   compose(    \r\n//     applyMiddleware(...middleware),\r\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n//   )\r\n// );\r\n\r\n/* Use when no redux dev tools */\r\nexport default store;\r\n\r\n/* Use when dev with redux dev tools */\r\n// export default storeDev;","import React from 'react';\r\nimport './App.scss';\r\nimport { Provider} from 'react-redux';\r\nimport { MainRouter } from 'router';\r\nimport store from 'store/store';\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <Provider store={store}>          \r\n          <MainRouter />\r\n        </Provider>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}