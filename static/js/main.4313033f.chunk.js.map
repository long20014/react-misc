{"version":3,"sources":["utils/constants.js","utils/getIsLoggedIn.js","router/guards/requireLogin.js","services/history.service.js","components/nav/nav.jsx","actions/auth-action.js","actions/type.js","pages/puzzle-page/puzzle-piece/puzzle-piece.jsx","pages/puzzle-page/puzzle-grid-slot/puzzle-grid-slot.jsx","pages/puzzle-page/puzzle-swap-count/puzzle-swap-count.jsx","components/timer/timer.jsx","shared/constants.js","services/grid.service.js","pages/puzzle-page/puzzle-grid/puzzle-grid.jsx","actions/puzzle-action.js","pages/puzzle-page/puzzle-menu/puzzle-menu.jsx","pages/puzzle-page/puzzle-setting/puzzle-setting.jsx","pages/puzzle-page/puzzle-score-board/puzzle-score-board.jsx","pages/puzzle-page/puzzle-page.jsx","pages/puzzle-page/puzzle-page-route.js","pages/home-page/home-page.jsx","pages/home-page/home-page-route.js","pages/clock-page/clock/clock.jsx","pages/clock-page/clock-page.jsx","pages/clock-page/clock-page-route.js","pages/login-page/login-page.jsx","pages/login-page/login-page-route.js","router/main-router.js","reducers/auth-reducer.js","reducers/puzzle-reducer.js","reducers/index.js","store/store.js","App.jsx","serviceWorker.js","index.js"],"names":["STORAGE_KEYS","Object","freeze","IS_LOGGED_IN","getIsLoggedIn","localStorage","getItem","requireLogin","to","from","next","meta","redirect","createBrowserHistory","Nav","props","logout","bind","this","logoutAction","history","push","isLoggedIn","className","onClick","style","color","React","Component","propsType","PropTypes","func","isRequired","connect","state","auth","dispatch","removeItem","type","PuzzlePiece","id","draggable","PuzzleGridSlot","pieceId","key","createPuzzlePiece","PuzzleSwapCount","_isMounted","_stopSubscribe","subscribeCount","updateCount","count","setState","subscribeTimer","swapChanceCount","startSubscribe","setInterval","setTimeout","Timer","_isStopped","subscribeStop","updateStop","stop","stopTimer","emitTime","time","isOn","start","startTimer","resetTimer","upTimingFunc","Date","now","timer","clearInterval","upTimer","Math","floor","GRID_SIZE_LV1","height","width","getIdNumber","item","split","getIdNumbers","items","ids","forEach","getPieceIdSet","gridSize","emptySlotQuantity","pieceIdSet","i","getRandomPieceId","splicePos","random","length","splice","findEmptySlots","slots","emptySlots","slot","hasChildNodes","coloringEmptySlots","emptySlot","backgroundColor","transformSlots","arraySize","transformedSlots","emptySlotIds","slotId","draggableChecked","includes","isAdjacent","firstElementChild","comparedSlot","comparedSlotId","swapPieces","slot1","slot2","slot1Copy","cloneNode","slot2Copy","replaceChild","childNodes","appendChild","gridService","GridService","gridSlotSize","gridStyle","gridTemplateColumns","gridTemplateRows","gridGap","border","PuzzleGrid","emptySlotBg","slotBg","hoveredSlotBg","isWin","subscribeWinning","callback","getEmittedTime","emittedTime","console","log","winningInfo","playedTime","playerName","level","gameLevel","getWinningInfo","announceWinning","getSwapChanceCount","gameSettings","nextProps","nextState","isUpdated","initDraggingEnvironment","restartGame","emptySlotId","createEmptySlotIds","gridSlots","Array","document","querySelectorAll","puzzlePieces","draggedItem","originalSlot","piece","addEventListener","parentElement","display","slotOriginalColor","e","preventDefault","draggedSlot","parentNode","draggedSlotId","append","checkWiningCondition","swapSuccess","winningCount","child","childId","broadcastWinning","alert","createGridSlots","map","puzzle","info","PuzzleMenu","PuzzleSetting","change","event","changeGameLevel","target","value","htmlFor","marginRight","name","onChange","puzzleScoreBoard","index","indexOf","PuzzlePage","path","exact","component","PuzzlePageRoute","HomePage","HomePageRoute","AUTH_ONLY","Clock","hour","minute","second","transform","ClockPage","clock","getHours","getMinutes","getSeconds","ClockPageRoute","LoginPage","login","loginAction","setItem","LoginPageRoute","GLOBAL_GUARDS","MainRouter","basename","process","guards","loading","initialState","changeLevel","combineReducers","action","middleware","thunk","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootReducer","compose","applyMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4313033f.chunk.js","sourcesContent":["export const STORAGE_KEYS = Object.freeze({\r\n  IS_LOGGED_IN: 'isLoggedIn',\r\n});","import { STORAGE_KEYS } from 'utils/constants';\r\n\r\nconst getIsLoggedIn = () => localStorage.getItem(STORAGE_KEYS.IS_LOGGED_IN) === 'true';\r\n\r\nexport default getIsLoggedIn;\r\n","import { AUTH_ONLY } from 'router/types';\r\nimport { getIsLoggedIn } from 'utils';\r\n\r\nconst requireLogin = (to, from, next) => {\r\n  if (to.meta[AUTH_ONLY] && !getIsLoggedIn()) {\r\n    next.redirect('/login');\r\n  }\r\n  next();\r\n};\r\n\r\nexport default requireLogin;","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from 'react';\r\nimport './nav.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport history from 'services/history.service';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { logoutAction } from 'actions/auth-action';\r\n\r\nclass Nav extends React.Component {\r\n  constructor(props) {\r\n    super(props);    \r\n    this.logout = this.logout.bind(this);\r\n  } \r\n\r\n  logout() {    \r\n    this.props.logoutAction();        \r\n    history.push('/login')\r\n  };\r\n\r\n  render() {\r\n    const isLoggedIn = this.props.isLoggedIn;    \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"nav\">\r\n          <h3>Logo</h3>\r\n          <ul className=\"nav-links\">\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/clock\">Clock</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/puzzle\">Puzzle</Link>\r\n            </li>\r\n          </ul>\r\n          {isLoggedIn && <button onClick={this.logout} style={{ color: 'black' }}>Log out</button>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nNav.propsType = {\r\n  logoutAction: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.auth.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps, { logoutAction })(Nav);","import {LOGIN, LOGOUT} from 'actions/type';\r\nimport { STORAGE_KEYS } from 'utils/constants';\r\nimport { getIsLoggedIn } from 'utils';\r\nexport function loginAction() {\r\n  return function(dispatch) {\r\n    localStorage.setItem(STORAGE_KEYS.IS_LOGGED_IN, 'true');\r\n    dispatch({\r\n      type: LOGIN,\r\n      isLoggedIn: getIsLoggedIn()\r\n    })\r\n  }\r\n}\r\n\r\nexport function logoutAction() {\r\n  return function(dispatch) {\r\n    localStorage.removeItem(STORAGE_KEYS.IS_LOGGED_IN);\r\n    dispatch({\r\n      type: LOGOUT,\r\n      isLoggedIn: getIsLoggedIn()\r\n    })\r\n  }\r\n}","export const LOGIN = 'login';\r\nexport const LOGOUT = 'logout'\r\n","import React from 'react';\r\nimport './puzzle-piece.scss';\r\n\r\nexport default class PuzzlePiece extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id={`piece-${this.props.id}`} className=\"puzzle-piece\" draggable={this.props.draggable}>\r\n        <h1>{this.props.id}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PuzzlePiece from '../puzzle-piece/puzzle-piece'\r\nimport './puzzle-grid-slot.scss';\r\n\r\nexport default class PuzzleGridSlot extends React.Component {\r\n\r\n  createPuzzlePiece() {\r\n    const id = this.props.pieceId; \r\n    if (id !== null) {      \r\n      return <PuzzlePiece key={id} id={id} draggable={false}/>\r\n    }    \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div id={`slot-${this.props.id}`} className=\"puzzle-grid__slot\">\r\n        {this.createPuzzlePiece()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-swap-count.scss';\r\n\r\nexport default class PuzzleSwapCount extends React.Component {\r\n  _isMounted = false;\r\n  _stopSubscribe = false;\r\n  subscribeCount = () => {    \r\n    this.props.updateCount((count) => {               \r\n      if (!this._stopSubscribe && count !== this.state.count) {\r\n        this.setState(state => state.count = count)\r\n        if (count === 0) {\r\n          this._stopSubscribe = true; \r\n        } \r\n      }                    \r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      subscribeTimer: 0,\r\n      count: props.swapChanceCount      \r\n    }\r\n    this.startSubscribe.bind(this)    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.startSubscribe();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this._stopSubscribe = true;        \r\n  }\r\n\r\n  startSubscribe() {    \r\n    setInterval(() => this.setState({\r\n      subscribeTimer: this.state.subscribeTimer + 1\r\n    }), 50);\r\n  }\r\n\r\n  render() {    \r\n    if (!this._stopSubscribe) {\r\n      setTimeout(() => this.subscribeCount(), 0)    \r\n    }\r\n                 \r\n    return (     \r\n      <div className={`component-wrapper ${this.props.className}`}>\r\n        <p>Swap chance: {this.state.count}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './timer.scss';\r\n\r\nexport default class Timer extends React.Component {\r\n  _isMounted = false;\r\n  _isStopped = false;\r\n  subscribeStop = () => {\r\n    this.props.updateStop((stop) => {           \r\n      if (stop && !this._isStopped) {\r\n        this.stopTimer();\r\n        this._isStopped = true;\r\n        this.props.emitTime(this.state.time)   \r\n      }                    \r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      time: 0,\r\n      isOn: false,\r\n      start: 0\r\n    }\r\n    this.startTimer = this.startTimer.bind(this)\r\n    this.stopTimer = this.stopTimer.bind(this)\r\n    this.resetTimer = this.resetTimer.bind(this)\r\n    this.upTimingFunc = this.upTimingFunc.bind(this)    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.stopTimer();\r\n  }\r\n  \r\n  startTimer() {\r\n    this.setState({\r\n      isOn: true,\r\n      time: this.state.time,\r\n      start: Date.now() - this.state.time\r\n    })\r\n    this.timer = setInterval(() => this.setState({\r\n      time: Date.now() - this.state.start\r\n    }), 10);\r\n  }\r\n\r\n  stopTimer() {\r\n    this.setState({isOn: false})\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  resetTimer() {\r\n    this.setState({time: 0, isOn: false})\r\n  }\r\n\r\n  upTimingFunc() {\r\n    this.startTimer();\r\n  }\r\n\r\n  downTimingFunc(start) {\r\n\r\n  }\r\n\r\n  render() { \r\n    if (!this._isStopped) {\r\n      setTimeout(() => this.subscribeStop(), 0)    \r\n    }\r\n    \r\n    if (this.props.upTimer) {\r\n      return (\r\n        <div className=\"component-wrapper\">\r\n          \r\n        </div>\r\n      );\r\n    }\r\n    \r\n    let start = (this.state.time === 0) ?\r\n      <button onClick={this.startTimer}>start</button> : null      \r\n    let stop = (this.state.time === 0 || !this.state.isOn) ? null :      \r\n      <button onClick={this.stopTimer}>stop</button>\r\n    let resume = (this.state.time === 0 || this.state.isOn) ? null :      \r\n      <button onClick={this.startTimer}>resume</button>\r\n    let reset = (this.state.time === 0 || this.state.isOn) ? null :      \r\n      <button onClick={this.resetTimer}>reset</button>          \r\n    return (     \r\n      <div className={`component-wrapper ${this.props.className}`}>\r\n        <h3>timer: {(Math.floor(this.state.time / 10) / 100)} s</h3>        \r\n        {/* {start}\r\n        {resume}\r\n        {stop}\r\n        {reset} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const GRID_SIZE_LV1 = {\r\n  height: 3,\r\n  width: 3\r\n}\r\n\r\nexport const GRID_SIZE_LV2 = {\r\n  height: 4,\r\n  width: 4\r\n}\r\n\r\nexport default GRID_SIZE_LV1","const GridService = () => {\r\n  return {\r\n    getPieceIdSet,\r\n    getRandomPieceId,\r\n    getIdNumber,\r\n    getIdNumbers,\r\n    findEmptySlots,\r\n    coloringEmptySlots,\r\n    transformSlots,\r\n    isAdjacent,\r\n    swapPieces\r\n  }\r\n};\r\n\r\nconst getIdNumber = (item) => {\r\n  return +(item.id.split('-')[1])\r\n}\r\n\r\nconst getIdNumbers = (items) => {\r\n  const ids = []\r\n  items.forEach(item => {\r\n    const id = getIdNumber(item);\r\n    ids.push(id)\r\n  })\r\n  return ids;\r\n}\r\n\r\nconst getPieceIdSet = (gridSize, emptySlotQuantity) => {\r\n  const pieceIdSet = [];\r\n  for (let i = 0; i < gridSize - emptySlotQuantity; i++) {      \r\n    pieceIdSet.push(i)      \r\n  }\r\n  return pieceIdSet\r\n}\r\n\r\nconst getRandomPieceId = (pieceIdSet) => {       \r\n  const splicePos = Math.floor(Math.random()*100 % pieceIdSet.length)\r\n  const pieceId = pieceIdSet.splice(splicePos, 1)\r\n  return pieceId[0]; \r\n}\r\n\r\nconst findEmptySlots = (slots) => {    \r\n  let emptySlots = [];\r\n  slots.forEach(slot => {\r\n    if (!slot.hasChildNodes()) {\r\n      emptySlots.push(slot);        \r\n    }\r\n  })\r\n  return emptySlots;\r\n}\r\n\r\nconst coloringEmptySlots = (emptySlots, color) => {\r\n  emptySlots.forEach(emptySlot => emptySlot.style.backgroundColor = color);  \r\n}\r\n\r\nconst transformSlots = (slots, emptySlots, arraySize) => {    \r\n  const transformedSlots = [];\r\n  const emptySlotIds = getIdNumbers(emptySlots);\r\n\r\n  slots.forEach(slot => {\r\n    const slotId = getIdNumber(slot);\r\n    let draggableChecked = false;     \r\n    emptySlots.forEach(emptySlot => {\r\n      if (!emptySlotIds.includes(slotId) && !draggableChecked) { \r\n        if (isAdjacent(slot, emptySlot, arraySize)) {\r\n          slot.firstElementChild.draggable = true;\r\n          draggableChecked = true;       \r\n        }\r\n        else {\r\n          slot.firstElementChild.draggable = false;  \r\n        }  \r\n      }         \r\n    });   \r\n    transformedSlots.push(slot);\r\n  })\r\n  return transformedSlots;\r\n}\r\n\r\nconst isAdjacent = (slot, comparedSlot, arraySize) => {  \r\n  const slotId = getIdNumber(slot);\r\n  const comparedSlotId = getIdNumber(comparedSlot);  \r\n  if ((slotId === comparedSlotId + 1 && Math.floor(slotId/arraySize) === Math.floor(comparedSlotId/arraySize)) ||\r\n    (slotId === comparedSlotId - 1 && Math.floor(slotId/arraySize) === Math.floor(comparedSlotId/arraySize)) ||\r\n    slotId === comparedSlotId + arraySize ||\r\n    slotId === comparedSlotId - arraySize) \r\n  {\r\n    return true;\r\n  }\r\n  return false\r\n}\r\n\r\nconst swapPieces = (slot1, slot2, arraySize) => {  \r\n  if (slot1.hasChildNodes && slot2.hasChildNodes && isAdjacent(slot1, slot2, arraySize)) {\r\n    const slot1Copy = slot1.cloneNode(true);\r\n    const slot2Copy = slot2.cloneNode(true);      \r\n    slot1Copy.replaceChild(slot1.firstElementChild, slot1Copy.childNodes[0])\r\n    slot2Copy.replaceChild(slot2.firstElementChild, slot2Copy.childNodes[0])\r\n    slot1.appendChild(slot2Copy.firstElementChild)\r\n    slot2.appendChild(slot1Copy.firstElementChild)\r\n    return true;\r\n  }\r\n  return false\r\n}\r\n\r\nexport default GridService;","import React from 'react';\r\nimport './puzzle-grid.scss';\r\nimport PuzzleGridSlot from '../puzzle-grid-slot/puzzle-grid-slot';\r\nimport PuzzleSwapCount from '../puzzle-swap-count/puzzle-swap-count'\r\nimport Timer from 'components/timer/timer';\r\nimport GRID_SIZE_LV1 from 'shared/constants';\r\nimport * as _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { broadcastWinning, restartGame, getWinningInfo } from 'actions/puzzle-action';\r\nimport GridService from 'services/grid.service';\r\n\r\nconst gridService = GridService();\r\n\r\nconst gridSlotSize = (gridSize) => {\r\n  let width = 160\r\n  let height = 160\r\n  if (gridSize.width > 3 || gridSize.height > 3) {\r\n    width = 120\r\n    height = 120 \r\n  }\r\n  return {\r\n    width,\r\n    height\r\n  }  \r\n}\r\n\r\nconst gridStyle = { \r\n  width: `${GRID_SIZE_LV1.width * gridSlotSize(GRID_SIZE_LV1).width + 30}px`,\r\n  height: `${GRID_SIZE_LV1.height * gridSlotSize(GRID_SIZE_LV1).height + 30}px`,  \r\n  gridTemplateColumns: `repeat(${GRID_SIZE_LV1.width}, ${gridSlotSize(GRID_SIZE_LV1).width}px)`,\r\n  gridTemplateRows: `repeat(${GRID_SIZE_LV1.height}, ${gridSlotSize(GRID_SIZE_LV1).height}px)`,\r\n  gridGap: `10px`,\r\n  border: `1px solid wheat`,  \r\n}\r\n\r\nclass PuzzleGrid extends React.Component {\r\n  emptySlotBg = 'rgba(255, 255, 255, 0.3)';\r\n  slotBg = 'rgba(255, 255, 255, 1)';\r\n  hoveredSlotBg = 'rgba(255, 255, 255, .6)';\r\n  swapChanceCount = 1;\r\n  _isMounted = false;\r\n  isWin = false; \r\n  subscribeWinning = (callback) => {\r\n    this.isWin = this.props.isWin;      \r\n    callback(this.isWin);\r\n  }\r\n  getEmittedTime = (emittedTime) => {\r\n    console.log('get time');     \r\n    const winningInfo = {\r\n      playedTime: emittedTime,\r\n      playerName: 'Unknown player',\r\n      level: this.props.gameLevel.level\r\n    }\r\n    this.props.getWinningInfo(winningInfo)\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.announceWinning = this.announceWinning.bind(this);\r\n    this.getSwapChanceCount = this.getSwapChanceCount.bind(this);\r\n    this.gameSettings = {\r\n      emptySlotQuantity: props.gameLevel.emptySlotQuantity,\r\n      arraySize: props.gameLevel.arraySize\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.isUpdated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  componentDidMount() {    \r\n    this.initDraggingEnvironment();   \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.restartGame();\r\n  }\r\n\r\n  createEmptySlotIds(gridSize, emptySlotQuantity) {\r\n    const emptySlotIds = [];\r\n    let count = 0;\r\n    while (count < emptySlotQuantity) {\r\n      const emptySlotId = Math.floor(Math.random()*100 % gridSize);\r\n      if (emptySlotIds.includes(emptySlotId)) {\r\n        continue;\r\n      }\r\n      emptySlotIds.push(emptySlotId)\r\n      count++; \r\n    }\r\n    return emptySlotIds;    \r\n  }\r\n\r\n  createGridSlots(emptySlotQuantity) {\r\n    const slots = [];\r\n    const gridSize = GRID_SIZE_LV1.height * GRID_SIZE_LV1.width;\r\n    const emptySlotIds = this.createEmptySlotIds(gridSize, emptySlotQuantity);\r\n    const pieceIdSet = gridService.getPieceIdSet(gridSize, emptySlotQuantity);    \r\n    for (let i = 0; i < gridSize; i++) {\r\n      let pieceId = null;\r\n      if (!emptySlotIds.includes(i)) {\r\n        pieceId = gridService.getRandomPieceId(pieceIdSet);\r\n      }\r\n      slots.push(<PuzzleGridSlot id={i} key={i} pieceId={pieceId} />)\r\n    }\r\n    return slots;\r\n  }\r\n\r\n  getSwapChanceCount(callback) {                   \r\n    callback(this.swapChanceCount)\r\n  }\r\n\r\n  initDraggingEnvironment() {\r\n    let gridSlots = Array.from(document.querySelectorAll('.puzzle-grid__slot'));    \r\n    let emptySlots = gridService.findEmptySlots(gridSlots)    \r\n    let transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);\r\n    const puzzlePieces = Array.from(document.querySelectorAll('.puzzle-piece'));    \r\n    gridService.coloringEmptySlots(emptySlots, this.emptySlotBg)     \r\n    let draggedItem = null;\r\n    let originalSlot = null;\r\n\r\n    puzzlePieces.forEach(piece => {      \r\n      piece.addEventListener('dragstart', () => {\r\n        originalSlot = piece.parentElement;        \r\n        draggedItem = piece;\r\n        setTimeout(() => {\r\n          draggedItem.style.display = 'none';\r\n        })\r\n      });\r\n      \r\n      piece.addEventListener('dragend', () => {       \r\n        setTimeout(() => {          \r\n          draggedItem.style.display = 'flex';\r\n          draggedItem = null\r\n        })\r\n      });  \r\n      \r\n      gridSlots.forEach(slot => {\r\n        const slotOriginalColor = slot.style.backgroundColor;\r\n\r\n        slot.addEventListener('dragover', (e) => {\r\n          e.preventDefault();          \r\n        });\r\n\r\n        slot.addEventListener('dragenter', (e) => {\r\n          e.preventDefault();\r\n          if (originalSlot.id !== slot.id && !slot.hasChildNodes()) {\r\n            slot.style.backgroundColor = this.hoveredSlotBg;          \r\n          }                \r\n        });\r\n\r\n        slot.addEventListener('dragleave', (e) => {\r\n          e.preventDefault();\r\n          const emptySlotIds = gridService.getIdNumbers(emptySlots);\r\n          const slotId = gridService.getIdNumber(slot)\r\n          if (!emptySlotIds.includes(slotId)) {\r\n            slot.style.backgroundColor = this.slotBg;   \r\n          }\r\n          else {\r\n            slot.style.backgroundColor = this.emptySlotBg  \r\n          }                 \r\n        });\r\n        \r\n        slot.addEventListener('drop', (e) => {          \r\n          const draggedSlot = draggedItem.parentNode;          \r\n          const slotId = gridService.getIdNumber(slot)\r\n          const draggedSlotId = gridService.getIdNumber(draggedSlot)     \r\n          if (!slot.hasChildNodes() && gridService.isAdjacent(slot, draggedSlot, this.gameSettings.arraySize)) { \r\n            draggedItem.style.display = 'flex';           \r\n            slot.append(draggedItem)            \r\n            slot.style.backgroundColor = this.slotBg\r\n            gridSlots = Array.from(document.querySelectorAll('.puzzle-grid__slot'));    \r\n            emptySlots = gridService.findEmptySlots(gridSlots)\r\n            gridService.coloringEmptySlots(emptySlots, this.emptySlotBg)    \r\n            transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);            \r\n            setTimeout(() => this.checkWiningCondition(transformedSlots, emptySlots), 100)            \r\n          }\r\n          else if (slot.hasChildNodes() && this.swapChanceCount > 0) {            \r\n            const swapSuccess = gridService.swapPieces(draggedSlot, slot, this.gameSettings.arraySize)\r\n            slot.firstElementChild.style.display = 'flex';\r\n            transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);\r\n            if (swapSuccess) {\r\n              this.swapChanceCount--;\r\n            } \r\n          }\r\n          else if (slotId !== draggedSlotId) {\r\n            slot.style.backgroundColor = slotOriginalColor;\r\n          }          \r\n        });         \r\n      })\r\n    });\r\n  }\r\n\r\n  checkWiningCondition(gridSlots, emptySlots) {\r\n    let count = 0;\r\n    const winningCount = gridSlots.length - emptySlots.length;       \r\n    gridSlots.forEach(slot => {\r\n      const child = slot.firstElementChild;\r\n      const slotId = gridService.getIdNumber(slot);\r\n      let childId = null;\r\n      if (child) {\r\n        childId = gridService.getIdNumber(child)\r\n      }\r\n      if (slotId === childId) {\r\n        count++;\r\n      }\r\n    })       \r\n    if (count === winningCount) {\r\n      this.announceWinning();\r\n    }\r\n  }\r\n\r\n  announceWinning() {\r\n    this.props.broadcastWinning();    \r\n    setTimeout(() => {\r\n      console.log('You win the game', this.props.isWin);\r\n      alert('Congratulation! You win the game')  \r\n    }, 100)      \r\n  }\r\n  \r\n  render() {    \r\n    const gridSlots = this.createGridSlots(this.gameSettings.emptySlotQuantity);    \r\n    return (\r\n      <div className=\"component-wrapper puzzle-wrapper\">\r\n        <div className=\"puzzle-grid\" style={gridStyle}>\r\n          {gridSlots.map(item => item)}\r\n        </div>\r\n        <Timer className={'timer-pos'} \r\n          stop={this.isWin} \r\n          updateStop={this.subscribeWinning} \r\n          emitTime={this.getEmittedTime}\r\n        />\r\n        <PuzzleSwapCount className={'text-pos'} updateCount={this.getSwapChanceCount} swapChanceCount={this.swapChanceCount}/>\r\n        <button onClick={this.announceWinning}>Win</button>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n\r\nPuzzleGrid.propsType = {\r\n  broadcastWinning: PropTypes.func.isRequired,\r\n  restartGame: PropTypes.func.isRequired,\r\n  getWinningInfo: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  isWin: state.puzzle.isWin,\r\n  gameLevel: state.puzzle.gameLevel\r\n})\r\n\r\nexport default connect(mapStateToProps, { broadcastWinning, restartGame, getWinningInfo })(PuzzleGrid);","\r\nexport function broadcastWinning() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: true\r\n    })\r\n  }\r\n}\r\n\r\nexport function restartGame() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: false\r\n    })\r\n  }\r\n}\r\n\r\nexport function changeGameLevel(level) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'changeGameLevel',\r\n      level\r\n    })\r\n  }\r\n}\r\n\r\nexport function getWinningInfo(info) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'getWinningInfo',\r\n      winningInfo: info\r\n    })\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-menu.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class PuzzleMenu extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <ul className=\"puzzle-menu\">\r\n          <li>\r\n            <Link to=\"/puzzle/game\">Start Game</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/puzzle/score-board\">Score Board</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/puzzle/setting\">Setting</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-setting.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { changeGameLevel } from 'actions/puzzle-action';\r\n\r\nclass PuzzleSetting extends React.Component {  \r\n  change = (event) => {    \r\n    this.props.changeGameLevel(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"puzzle-setting\">\r\n          <div className=\"setting-option-wrapper\">\r\n            <label htmlFor=\"level\" style={{marginRight: '10px'}}>Game Level:</label>\r\n            <select name=\"level\" id=\"level\" onChange={this.change} value={this.props.level}>\r\n              <option value=\"Easy\">Easy</option>\r\n              <option value=\"Normal\">Normal</option>\r\n              <option value=\"Hard\">Hard</option>\r\n            </select> \r\n          </div>\r\n                   \r\n          <li>\r\n            <Link to=\"/puzzle\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPuzzleSetting.propsType = {  \r\n  changeGameLevel: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  level: state.puzzle.gameLevel.level\r\n})\r\n\r\nexport default connect(mapStateToProps, { changeGameLevel })(PuzzleSetting);\r\n","import React from 'react';\r\nimport './puzzle-score-board.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass puzzleScoreBoard extends React.Component {  \r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"puzzle-menu\">\r\n          {this.props.winningInfo.map((info) => {\r\n            const index = this.props.winningInfo.indexOf(info)\r\n            return(\r\n              <p key={index}>{index+1}. {info.playerName}: {+info.playedTime/1000}s ({info.level})</p>\r\n            ) \r\n          })}          \r\n          <li>\r\n            <Link to=\"/puzzle\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  winningInfo: state.puzzle.winningInfo\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(puzzleScoreBoard);\r\n","import React from 'react';\r\nimport './puzzle-page.scss';\r\nimport PuzzleGrid from './puzzle-grid/puzzle-grid';\r\nimport PuzzleMenu from './puzzle-menu/puzzle-menu';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport PuzzleSetting from './puzzle-setting/puzzle-setting';\r\nimport puzzleScoreBoard from './puzzle-score-board/puzzle-score-board';\r\n\r\nexport default class PuzzlePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Switch>\r\n              <Route path=\"/puzzle\" exact component={PuzzleMenu} />\r\n              <Route path=\"/puzzle/game\" exact component={PuzzleGrid} />\r\n              <Route path=\"/puzzle/setting\" exact component={PuzzleSetting} />\r\n              <Route path=\"/puzzle/score-board\" exact component={puzzleScoreBoard} />\r\n            </Switch>\r\n          </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport PuzzlePage from 'pages/puzzle-page/puzzle-page';\r\n\r\nconst PuzzlePageRoute = () => {\r\n  return (\r\n    <Route path=\"/puzzle\" component={PuzzlePage} />\r\n  )\r\n}\r\n\r\nexport default PuzzlePageRoute;","import React from 'react';\r\nimport './home-page.scss';\r\n\r\nexport default class HomePage extends React.Component {  \r\n  render() {   \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <h1>HomePage</h1>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\nimport HomePage from 'pages/home-page/home-page';\r\nimport { GuardedRoute } from 'react-router-guards';\r\nconst HomePageRoute = () => {\r\n  return (\r\n    <GuardedRoute path=\"/\" exact component={HomePage} meta={{AUTH_ONLY: true}} />\r\n  )\r\n}\r\n\r\nexport default HomePageRoute;","import React from 'react';\r\nimport './clock.scss';\r\n\r\nexport default class Clock extends React.Component {\r\n  render() {    \r\n    const hour = this.props.hour\r\n    const minute = this.props.minute\r\n    const second = this.props.second\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"clock-wrapper\">\r\n          <div className=\"clock\">\r\n            <div className=\"hand hour-hand\" style={{transform: `rotate(${hour*30 + minute/2 + second/120 - 90}deg)`}}></div>\r\n            <div className=\"hand minute-hand\" style={{transform: `rotate(${minute*6 + second/10 - 90}deg)`}}></div>\r\n            <div className=\"hand second-hand\" style={{transform: `rotate(${second*6 - 90}deg)`}}></div>\r\n          </div>         \r\n        </div>\r\n        <div className=\"timer\">{hour}:{minute < 10 ? '0' + minute : minute}:{second < 10 ? '0' + second : second}</div>       \r\n      </div>      \r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\n\r\nimport './clock-page.scss';\r\nimport Clock from './clock/clock';\r\n\r\nexport default class ClockPage extends React.Component {\r\n  _isMounted = false;\r\n  clock;\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      time: new Date()\r\n    }    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.clock = setInterval(()=> {\r\n        this.setState(state => state.time = new Date())\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    clearInterval(this.clock);\r\n  }\r\n\r\n  render() {        \r\n    const hour = this.state.time.getHours()\r\n    const minute = this.state.time.getMinutes()\r\n    const second = this.state.time.getSeconds()\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Clock \r\n            hour={hour} \r\n            minute={minute} \r\n            second={second} \r\n          />          \r\n        </header>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport ClockPage from 'pages/clock-page/clock-page';\r\n\r\nconst ClockPageRoute = () => {\r\n  return (\r\n    <Route path=\"/clock\" component={ClockPage} />\r\n  )\r\n}\r\n\r\nexport default ClockPageRoute;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './login-page.scss';\r\nimport history from 'services/history.service';\r\nimport { connect } from 'react-redux';\r\nimport { loginAction } from 'actions/auth-action';\r\n\r\nclass LoginPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.login = this.login.bind(this);\r\n  } \r\n\r\n  login() {    \r\n    this.props.loginAction();\r\n    history.push('/')        \r\n  };\r\n\r\n  render() {     \r\n    if (this.props.isLoggedIn) {\r\n      return <Redirect to=\"/\" />\r\n    }   \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <button onClick={this.login}>Log in</button>\r\n      </div>\r\n    );    \r\n  }  \r\n}\r\n\r\nLoginPage.propTypes = {  \r\n  loginAction: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.auth.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps, { loginAction })(LoginPage);","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport LoginPage from 'pages/login-page/login-page';\r\n\r\nconst LoginPageRoute = () => {\r\n  return (\r\n    <Route path=\"/login\" component={LoginPage} />\r\n  )\r\n}\r\n\r\nexport default LoginPageRoute;","import React from 'react';\r\nimport { requireLogin } from 'router/guards';\r\nimport { GuardProvider } from 'react-router-guards';\r\nimport history from 'services/history.service';\r\nimport { Switch } from 'react-router-dom';\r\nimport { Router } from \"react-router\";\r\nimport Nav from 'components/nav/nav';\r\nimport PuzzlePageRoute from 'pages/puzzle-page/puzzle-page-route'\r\nimport HomePageRoute from 'pages/home-page/home-page-route'\r\nimport ClockPageRoute from 'pages/clock-page/clock-page-route'\r\nimport LoginPageRoute from 'pages/login-page/login-page-route';\r\n\r\nconst GLOBAL_GUARDS = [requireLogin];\r\nconst MainRouter = () => {\r\n  return (\r\n    <Router basename={`${process.env.PUBLIC_URL}/`} history={history}>\r\n      <Nav />\r\n      <GuardProvider guards={GLOBAL_GUARDS} loading=\"Loading...\" >\r\n        <Switch>\r\n          {HomePageRoute()}\r\n          {ClockPageRoute()}\r\n          {PuzzlePageRoute()}\r\n          {LoginPageRoute()}\r\n        </Switch>\r\n      </GuardProvider>          \r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default MainRouter;","import {LOGIN, LOGOUT} from 'actions/type';\r\nimport { getIsLoggedIn } from 'utils';\r\n\r\nconst initialState = {\r\n  isLoggedIn: getIsLoggedIn()\r\n}\r\n\r\nexport default function(state = initialState, action) {  \r\n  switch (action.type) {\r\n    case LOGIN:      \r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","const initialState = {\r\n  isWin: false,\r\n  gameLevel: {\r\n    level: 'Normal',\r\n    emptySlotQuantity: 2,\r\n    arraySize: 3\r\n  },\r\n  winningInfo: []\r\n}\r\n\r\nconst changeLevel = (level) => {\r\n  switch (level) {\r\n    case 'Easy':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 3,\r\n        arraySize: 3\r\n      }\r\n    case 'Normal':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 2,\r\n        arraySize: 3\r\n      }\r\n    case 'Hard':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 1,\r\n        arraySize: 3\r\n      }\r\n    default:\r\n      return {\r\n        level: 2,\r\n        emptySlotQuantity: 2,\r\n        arraySize: 3\r\n      }\r\n  }\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'broadcastWinning':\r\n      return {\r\n        ...state,\r\n        isWin: action.isWin\r\n      };\r\n    case 'changeGameLevel':\r\n      return {\r\n        ...state,\r\n        gameLevel: changeLevel(action.level)\r\n      };\r\n    case 'getWinningInfo':\r\n      console.log(state.winningInfo);\r\n      console.log(action.winningInfo);\r\n      return {\r\n        ...state,\r\n        winningInfo: [...state.winningInfo, action.winningInfo]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import { combineReducers } from 'redux';\r\nimport authReducer from './auth-reducer'\r\nimport puzzleReducer from './puzzle-reducer'\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  puzzle: puzzleReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from 'reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst devTools = process.env.NODE_ENV === 'prod' ? null :\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(\r\n  rootReducer, \r\n  initialState, \r\n  compose(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n\r\nexport default store;","import React from 'react';\nimport './App.scss';\nimport { Provider} from 'react-redux';\nimport { MainRouter } from 'router';\nimport store from 'store/store';\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <div className=\"component-wrapper\">\n        <Provider store={store}>          \n          <MainRouter />\n        </Provider>        \n      </div>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}