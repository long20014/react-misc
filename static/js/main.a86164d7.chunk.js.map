{"version":3,"sources":["utils/constants.js","utils/getIsLoggedIn.js","router/guards/requireLogin.js","services/history.service.js","components/nav/nav.jsx","actions/auth-action.js","actions/type.js","pages/puzzle-page/puzzle-piece/puzzle-piece.jsx","pages/puzzle-page/puzzle-grid-slot/puzzle-grid-slot.jsx","pages/puzzle-page/puzzle-swap-count/puzzle-swap-count.jsx","components/timer/timer.jsx","shared/constants.js","services/grid.service.js","pages/puzzle-page/puzzle-grid/puzzle-grid.jsx","actions/puzzle-action.js","pages/puzzle-page/puzzle-menu/puzzle-menu.jsx","pages/puzzle-page/puzzle-setting/puzzle-setting.jsx","pages/puzzle-page/puzzle-score-board/puzzle-score-board.jsx","pages/puzzle-page/puzzle-page.jsx","pages/puzzle-page/puzzle-page-route.js","pages/home-page/home-page.jsx","pages/home-page/home-page-route.js","pages/clock-page/clock/clock.jsx","pages/clock-page/clock-page.jsx","pages/clock-page/clock-page-route.js","pages/login-page/login-page.jsx","pages/login-page/login-page-route.js","actions/card-action.js","services/card.service.js","pages/card-page/card-piece/card-piece.jsx","pages/card-page/card-grid-slot/card-grid-slot.jsx","pages/card-page/counter/counter.jsx","services/card-grid.service.js","pages/card-page/card-grid/card-grid.jsx","pages/card-page/card-menu/card-menu.jsx","pages/card-page/card-setting/card-setting.jsx","pages/card-page/card-score-board/card-score-board.jsx","pages/card-page/card-page.jsx","pages/card-page/card-page-route.js","router/main-router.js","reducers/auth-reducer.js","reducers/puzzle-reducer.js","reducers/card-reducer.js","reducers/index.js","store/store.js","App.jsx","serviceWorker.js","index.js"],"names":["STORAGE_KEYS","Object","freeze","IS_LOGGED_IN","getIsLoggedIn","localStorage","getItem","requireLogin","to","from","next","meta","redirect","createBrowserHistory","Nav","props","logout","bind","this","logoutAction","history","push","isLoggedIn","className","onClick","style","color","React","Component","propsType","PropTypes","func","isRequired","compose","withRouter","connect","state","auth","dispatch","removeItem","type","PuzzlePiece","id","draggable","PuzzleGridSlot","pieceId","key","createPuzzlePiece","PuzzleSwapCount","_isMounted","_stopSubscribe","subscribeCount","updateCount","count","setState","subscribeTimer","swapChanceCount","startSubscribe","setInterval","setTimeout","Timer","_isStopped","subscribeStop","updateStop","stop","stopTimer","emitTime","time","isOn","start","startTimer","resetTimer","upTimingFunc","Date","now","timer","clearInterval","upTimer","Math","floor","constants","GRID_SIZE_LV1","height","width","GRID_SIZE_LV2","config","API_URL","getIdNumber","item","split","getIdNumbers","items","ids","forEach","getPieceIdSet","gridSize","emptySlotQuantity","pieceIdSet","i","getRandomPieceId","splicePos","random","length","splice","findEmptySlots","slots","emptySlots","slot","hasChildNodes","coloringEmptySlots","emptySlot","backgroundColor","transformSlots","arraySize","transformedSlots","emptySlotIds","slotId","draggableChecked","includes","isAdjacent","firstElementChild","comparedSlot","comparedSlotId","swapPieces","slot1","slot2","slot1Copy","cloneNode","slot2Copy","replaceChild","childNodes","appendChild","GridService","gridService","gridSlotSize","HorizontalGaps","VerticalGaps","gridStyle","gridTemplateColumns","gridTemplateRows","gridGap","border","PuzzleGrid","emptySlotBg","slotBg","hoveredSlotBg","isWin","subscribeWinning","callback","getEmittedTime","emittedTime","console","log","winningInfo","playedTime","playerName","level","gameLevel","setWinningInfo","announceWinning","getSwapChanceCount","gameSettings","nextProps","nextState","isUpdated","initDraggingEnvironment","restartGame","emptySlotId","createEmptySlotIds","gridSlots","Array","document","querySelectorAll","puzzlePieces","draggedItem","originalSlot","piece","addEventListener","parentElement","display","slotOriginalColor","e","preventDefault","draggedSlot","parentNode","draggedSlotId","append","checkWiningCondition","swapSuccess","winningCount","child","childId","broadcastWinning","alert","createGridSlots","map","puzzle","info","PuzzleMenu","PuzzleSetting","change","event","changeGameLevel","target","value","htmlFor","marginRight","name","onChange","PuzzleScoreBoard","sortedWinningInfo","sort","info1","info2","index","indexOf","PuzzlePage","path","exact","component","puzzleScoreBoard","PuzzlePageRoute","HomePage","HomePageRoute","AUTH_ONLY","Clock","hour","minute","second","transform","ClockPage","clock","getHours","getMinutes","getSeconds","ClockPageRoute","LoginPage","login","loginAction","setItem","LoginPageRoute","increaseCount","cardService","updateWinningInfo","axios","post","then","res","data","catch","error","getWinningInfo","a","method","url","CardPiece","flipCardUp","openedPair","getElementsByClassName","getAttribute","card1","card2","classList","remove","number","arr","steps","concat","unmatchedSlots","children","firstChild","contains","shiftArrayToLeft","removeChild","cardPiece","querySelector","isWaiting","add","increaseMoveCount","moveCount","isEven","isPairMatching","increaseMatchedPairCount","matchedPairs","disableFlip","moves","setWait","flipCardsDown","changeCardsPosition","openedCards","card","countMoves","countMatchedPairs","currentMoveCount","currentMatchedPairs","CardGridSlot","createCardPiece","Counter","label","getRandomPieceName","pieceNames","CardGridService","cardGridService","CardGrid","getMoveCount","getMatchedPairs","CardMenu","CardSetting","CardScoreBoard","infoList","CardPage","cardScoreBoard","CardPageRoute","GLOBAL_GUARDS","MainRouter","guards","loading","initialState","changeLevel","combineReducers","action","middleware","thunk","store","window","__REDUX_DEVTOOLS_EXTENSION__","createStore","rootReducer","applyMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a86164d7.chunk.js","sourcesContent":["export const STORAGE_KEYS = Object.freeze({\r\n  IS_LOGGED_IN: 'isLoggedIn',\r\n});","import { STORAGE_KEYS } from 'utils/constants';\r\n\r\nconst getIsLoggedIn = () => localStorage.getItem(STORAGE_KEYS.IS_LOGGED_IN) === 'true';\r\n\r\nexport default getIsLoggedIn;\r\n","import { AUTH_ONLY } from 'router/types';\r\nimport { getIsLoggedIn } from 'utils';\r\n\r\nconst requireLogin = (to, from, next) => {\r\n  if (to.meta[AUTH_ONLY] && !getIsLoggedIn()) {\r\n    next.redirect('/login');\r\n  }\r\n  next();\r\n};\r\n\r\nexport default requireLogin;","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React from 'react';\r\nimport './nav.scss';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport { logoutAction } from 'actions/auth-action';\r\n\r\nclass Nav extends React.Component {\r\n  constructor(props) {\r\n    super(props);    \r\n    this.logout = this.logout.bind(this);\r\n  } \r\n\r\n  logout() {    \r\n    this.props.logoutAction();        \r\n    this.props.history.push('login');\r\n  };\r\n\r\n  render() {\r\n    const isLoggedIn = this.props.isLoggedIn;    \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"nav\">\r\n          <h3>Logo</h3>\r\n          <ul className=\"nav-links\">\r\n            <li>\r\n              <Link to=\"/\">Home</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/clock\">Clock</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/puzzle\">Puzzle</Link>\r\n            </li>\r\n            <li>\r\n              <Link to=\"/card\">Card</Link>\r\n            </li>\r\n          </ul>\r\n          {isLoggedIn && <button onClick={this.logout} style={{ color: 'black' }}>Log out</button>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nNav.propsType = {\r\n  logoutAction: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.auth.isLoggedIn\r\n})\r\n\r\nexport default compose(\r\n  withRouter,\r\n  connect(mapStateToProps, { logoutAction })\r\n)(Nav);","import {LOGIN, LOGOUT} from 'actions/type';\r\nimport { STORAGE_KEYS } from 'utils/constants';\r\nimport { getIsLoggedIn } from 'utils';\r\nexport function loginAction() {\r\n  return function(dispatch) {\r\n    localStorage.setItem(STORAGE_KEYS.IS_LOGGED_IN, 'true');\r\n    dispatch({\r\n      type: LOGIN,\r\n      isLoggedIn: getIsLoggedIn()\r\n    })\r\n  }\r\n}\r\n\r\nexport function logoutAction() {\r\n  return function(dispatch) {\r\n    localStorage.removeItem(STORAGE_KEYS.IS_LOGGED_IN);\r\n    dispatch({\r\n      type: LOGOUT,\r\n      isLoggedIn: getIsLoggedIn()\r\n    })\r\n  }\r\n}","export const LOGIN = 'login';\r\nexport const LOGOUT = 'logout'\r\n","import React from 'react';\r\nimport './puzzle-piece.scss';\r\n\r\nexport default class PuzzlePiece extends React.Component {\r\n  render() {\r\n    return (\r\n      <div id={`piece-${this.props.id}`} className=\"puzzle-piece\" draggable={this.props.draggable}>\r\n        <h1>{this.props.id}</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PuzzlePiece from '../puzzle-piece/puzzle-piece'\r\nimport './puzzle-grid-slot.scss';\r\n\r\nexport default class PuzzleGridSlot extends React.Component {\r\n\r\n  createPuzzlePiece() {\r\n    const id = this.props.pieceId; \r\n    if (id !== null) {      \r\n      return <PuzzlePiece key={id} id={id} draggable={false}/>\r\n    }    \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div id={`slot-${this.props.id}`} className=\"puzzle-grid__slot\">\r\n        {this.createPuzzlePiece()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-swap-count.scss';\r\n\r\nexport default class PuzzleSwapCount extends React.Component {\r\n  _isMounted = false;\r\n  _stopSubscribe = false;\r\n  subscribeCount = () => {    \r\n    this.props.updateCount((count) => {               \r\n      if (!this._stopSubscribe && count !== this.state.count) {\r\n        this.setState(state => state.count = count)\r\n        if (count === 0) {\r\n          this._stopSubscribe = true; \r\n        } \r\n      }                    \r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      subscribeTimer: 0,\r\n      count: props.swapChanceCount      \r\n    }\r\n    this.startSubscribe.bind(this)    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.startSubscribe();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this._stopSubscribe = true;        \r\n  }\r\n\r\n  startSubscribe() {    \r\n    setInterval(() => this.setState({\r\n      subscribeTimer: this.state.subscribeTimer + 1\r\n    }), 50);\r\n  }\r\n\r\n  render() {    \r\n    if (!this._stopSubscribe) {\r\n      setTimeout(() => this.subscribeCount(), 0)    \r\n    }\r\n                 \r\n    return (     \r\n      <div className={`component-wrapper ${this.props.className}`}>\r\n        <p>Swap chance: {this.state.count}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './timer.scss';\r\n\r\nexport default class Timer extends React.Component {\r\n  _isMounted = false;\r\n  _isStopped = false;\r\n  subscribeStop = () => {\r\n    this.props.updateStop((stop) => {           \r\n      if (stop && !this._isStopped) {\r\n        this.stopTimer();\r\n        this._isStopped = true;\r\n        this.props.emitTime(this.state.time)   \r\n      }                    \r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      time: 0,\r\n      isOn: false,\r\n      start: 0\r\n    }\r\n    this.startTimer = this.startTimer.bind(this)\r\n    this.stopTimer = this.stopTimer.bind(this)\r\n    this.resetTimer = this.resetTimer.bind(this)\r\n    this.upTimingFunc = this.upTimingFunc.bind(this)    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.startTimer();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this.stopTimer();\r\n  }\r\n  \r\n  startTimer() {\r\n    this.setState({\r\n      isOn: true,\r\n      time: this.state.time,\r\n      start: Date.now() - this.state.time\r\n    })\r\n    this.timer = setInterval(() => this.setState({\r\n      time: Date.now() - this.state.start\r\n    }), 10);\r\n  }\r\n\r\n  stopTimer() {\r\n    this.setState({isOn: false})\r\n    clearInterval(this.timer)\r\n  }\r\n\r\n  resetTimer() {\r\n    this.setState({time: 0, isOn: false})\r\n  }\r\n\r\n  upTimingFunc() {\r\n    this.startTimer();\r\n  }\r\n\r\n  downTimingFunc(start) {\r\n\r\n  }\r\n\r\n  render() { \r\n    if (!this._isStopped) {\r\n      setTimeout(() => this.subscribeStop(), 0)    \r\n    }\r\n    \r\n    if (this.props.upTimer) {\r\n      return (\r\n        <div className=\"component-wrapper\">\r\n          \r\n        </div>\r\n      );\r\n    }\r\n    \r\n    let start = (this.state.time === 0) ?\r\n      <button onClick={this.startTimer}>start</button> : null      \r\n    let stop = (this.state.time === 0 || !this.state.isOn) ? null :      \r\n      <button onClick={this.stopTimer}>stop</button>\r\n    let resume = (this.state.time === 0 || this.state.isOn) ? null :      \r\n      <button onClick={this.startTimer}>resume</button>\r\n    let reset = (this.state.time === 0 || this.state.isOn) ? null :      \r\n      <button onClick={this.resetTimer}>reset</button>          \r\n    return (     \r\n      <div className={`component-wrapper ${this.props.className}`}>\r\n        <h3>timer: {(Math.floor(this.state.time / 10) / 100)} s</h3>        \r\n        {/* {start}\r\n        {resume}\r\n        {stop}\r\n        {reset} */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const GRID_SIZE_LV1 = {\r\n  height: 3,\r\n  width: 3\r\n}\r\n\r\nconst GRID_SIZE_LV2 = {\r\n  height: 4,\r\n  width: 4\r\n}\r\n\r\nconst config = {\r\n  API_URL: 'https://5e9e56abfb467500166c3dce.mockapi.io/react-misc/'\r\n}\r\n\r\nconst constants =  {  \r\n  GRID_SIZE_LV1,\r\n  GRID_SIZE_LV2,\r\n  config  \r\n}\r\n\r\nexport default constants","const GridService = () => {\r\n  return {\r\n    getPieceIdSet,\r\n    getRandomPieceId,\r\n    getIdNumber,\r\n    getIdNumbers,\r\n    findEmptySlots,\r\n    coloringEmptySlots,\r\n    transformSlots,\r\n    isAdjacent,\r\n    swapPieces\r\n  }\r\n};\r\n\r\nconst getIdNumber = (item) => {\r\n  return +(item.id.split('-')[1])\r\n}\r\n\r\nconst getIdNumbers = (items) => {\r\n  const ids = []\r\n  items.forEach(item => {\r\n    const id = getIdNumber(item);\r\n    ids.push(id)\r\n  })\r\n  return ids;\r\n}\r\n\r\nconst getPieceIdSet = (gridSize, emptySlotQuantity = 0) => {\r\n  const pieceIdSet = [];\r\n  for (let i = 0; i < gridSize - emptySlotQuantity; i++) {      \r\n    pieceIdSet.push(i)      \r\n  }\r\n  return pieceIdSet\r\n}\r\n\r\nconst getRandomPieceId = (pieceIdSet) => {       \r\n  const splicePos = Math.floor(Math.random()*100 % pieceIdSet.length)\r\n  const pieceId = pieceIdSet.splice(splicePos, 1)\r\n  return pieceId[0]; \r\n}\r\n\r\nconst findEmptySlots = (slots) => {    \r\n  let emptySlots = [];\r\n  slots.forEach(slot => {\r\n    if (!slot.hasChildNodes()) {\r\n      emptySlots.push(slot);        \r\n    }\r\n  })\r\n  return emptySlots;\r\n}\r\n\r\nconst coloringEmptySlots = (emptySlots, color) => {\r\n  emptySlots.forEach(emptySlot => emptySlot.style.backgroundColor = color);  \r\n}\r\n\r\nconst transformSlots = (slots, emptySlots, arraySize) => {    \r\n  const transformedSlots = [];\r\n  const emptySlotIds = getIdNumbers(emptySlots);\r\n\r\n  slots.forEach(slot => {\r\n    const slotId = getIdNumber(slot);\r\n    let draggableChecked = false;     \r\n    emptySlots.forEach(emptySlot => {\r\n      if (!emptySlotIds.includes(slotId) && !draggableChecked) { \r\n        if (isAdjacent(slot, emptySlot, arraySize)) {\r\n          slot.firstElementChild.draggable = true;\r\n          draggableChecked = true;       \r\n        }\r\n        else {\r\n          slot.firstElementChild.draggable = false;  \r\n        }  \r\n      }         \r\n    });   \r\n    transformedSlots.push(slot);\r\n  })\r\n  return transformedSlots;\r\n}\r\n\r\nconst isAdjacent = (slot, comparedSlot, arraySize) => {  \r\n  const slotId = getIdNumber(slot);\r\n  const comparedSlotId = getIdNumber(comparedSlot);  \r\n  if ((slotId === comparedSlotId + 1 && Math.floor(slotId/arraySize) === Math.floor(comparedSlotId/arraySize)) ||\r\n    (slotId === comparedSlotId - 1 && Math.floor(slotId/arraySize) === Math.floor(comparedSlotId/arraySize)) ||\r\n    slotId === comparedSlotId + arraySize ||\r\n    slotId === comparedSlotId - arraySize) \r\n  {\r\n    return true;\r\n  }\r\n  return false\r\n}\r\n\r\nconst swapPieces = (slot1, slot2, arraySize) => {  \r\n  if (slot1.hasChildNodes && slot2.hasChildNodes && isAdjacent(slot1, slot2, arraySize)) {\r\n    const slot1Copy = slot1.cloneNode(true);\r\n    const slot2Copy = slot2.cloneNode(true);      \r\n    slot1Copy.replaceChild(slot1.firstElementChild, slot1Copy.childNodes[0])\r\n    slot2Copy.replaceChild(slot2.firstElementChild, slot2Copy.childNodes[0])\r\n    slot1.appendChild(slot2Copy.firstElementChild)\r\n    slot2.appendChild(slot1Copy.firstElementChild)\r\n    return true;\r\n  }\r\n  return false\r\n}\r\n\r\nexport default GridService;","import React from 'react';\r\nimport './puzzle-grid.scss';\r\nimport PuzzleGridSlot from '../puzzle-grid-slot/puzzle-grid-slot';\r\nimport PuzzleSwapCount from '../puzzle-swap-count/puzzle-swap-count'\r\nimport Timer from 'components/timer/timer';\r\nimport constants from 'shared/constants';\r\nimport * as _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { broadcastWinning, restartGame, setWinningInfo } from 'actions/puzzle-action';\r\nimport GridService from 'services/grid.service';\r\n\r\nconst gridService = GridService();\r\n\r\nconst gridSlotSize = (gridSize) => {\r\n  let width = 160\r\n  let height = 160\r\n  if (gridSize.width > 3 || gridSize.height > 3) {\r\n    width = 120\r\n    height = 120 \r\n  }\r\n  return {\r\n    width,\r\n    height\r\n  }  \r\n}\r\n\r\nconst gap = 10;\r\nconst HorizontalGaps = constants.GRID_SIZE_LV1.width * gap\r\nconst VerticalGaps = constants.GRID_SIZE_LV1.height * gap\r\n\r\nconst gridStyle = { \r\n  width: `${constants.GRID_SIZE_LV1.width * gridSlotSize(constants.GRID_SIZE_LV1).width + HorizontalGaps}px`,\r\n  height: `${constants.GRID_SIZE_LV1.height * gridSlotSize(constants.GRID_SIZE_LV1).height + VerticalGaps}px`,  \r\n  gridTemplateColumns: `repeat(${constants.GRID_SIZE_LV1.width}, ${gridSlotSize(constants.GRID_SIZE_LV1).width}px)`,\r\n  gridTemplateRows: `repeat(${constants.GRID_SIZE_LV1.height}, ${gridSlotSize(constants.GRID_SIZE_LV1).height}px)`,\r\n  gridGap: `${gap}px`,\r\n  border: `1px solid wheat`,  \r\n}\r\n\r\nclass PuzzleGrid extends React.Component {\r\n  emptySlotBg = 'rgba(255, 255, 255, 0.3)';\r\n  slotBg = 'rgba(255, 255, 255, 1)';\r\n  hoveredSlotBg = 'rgba(255, 255, 255, .6)';\r\n  swapChanceCount = 1;\r\n  _isMounted = false;\r\n  isWin = false; \r\n  subscribeWinning = (callback) => {\r\n    this.isWin = this.props.isWin;      \r\n    callback(this.isWin);\r\n  }\r\n  getEmittedTime = (emittedTime) => {\r\n    console.log('get time');     \r\n    const winningInfo = {\r\n      playedTime: emittedTime,\r\n      playerName: 'Unknown player',\r\n      level: this.props.gameLevel.level\r\n    }\r\n    this.props.setWinningInfo(winningInfo)\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.announceWinning = this.announceWinning.bind(this);\r\n    this.getSwapChanceCount = this.getSwapChanceCount.bind(this);\r\n    this.gameSettings = {\r\n      emptySlotQuantity: props.gameLevel.emptySlotQuantity,\r\n      arraySize: props.gameLevel.arraySize\r\n    }\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.isUpdated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  componentDidMount() {    \r\n    this.initDraggingEnvironment();   \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.restartGame();\r\n  }\r\n\r\n  createEmptySlotIds(gridSize, emptySlotQuantity) {\r\n    const emptySlotIds = [];\r\n    let count = 0;\r\n    while (count < emptySlotQuantity) {\r\n      const emptySlotId = Math.floor(Math.random()*100 % gridSize);\r\n      if (emptySlotIds.includes(emptySlotId)) {\r\n        continue;\r\n      }\r\n      emptySlotIds.push(emptySlotId)\r\n      count++; \r\n    }\r\n    return emptySlotIds;    \r\n  }\r\n\r\n  createGridSlots(emptySlotQuantity) {\r\n    const slots = [];\r\n    const gridSize = constants.GRID_SIZE_LV1.height * constants.GRID_SIZE_LV1.width;\r\n    const emptySlotIds = this.createEmptySlotIds(gridSize, emptySlotQuantity);\r\n    const pieceIdSet = gridService.getPieceIdSet(gridSize, emptySlotQuantity);    \r\n    for (let i = 0; i < gridSize; i++) {\r\n      let pieceId = null;\r\n      if (!emptySlotIds.includes(i)) {\r\n        pieceId = gridService.getRandomPieceId(pieceIdSet);\r\n      }\r\n      slots.push(<PuzzleGridSlot id={i} key={i} pieceId={pieceId} />)\r\n    }\r\n    return slots;\r\n  }\r\n\r\n  getSwapChanceCount(callback) {                   \r\n    callback(this.swapChanceCount)\r\n  }\r\n\r\n  initDraggingEnvironment() {\r\n    let gridSlots = Array.from(document.querySelectorAll('.puzzle-grid__slot'));    \r\n    let emptySlots = gridService.findEmptySlots(gridSlots)    \r\n    let transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);\r\n    const puzzlePieces = Array.from(document.querySelectorAll('.puzzle-piece'));    \r\n    gridService.coloringEmptySlots(emptySlots, this.emptySlotBg)     \r\n    let draggedItem = null;\r\n    let originalSlot = null;\r\n\r\n    puzzlePieces.forEach(piece => {      \r\n      piece.addEventListener('dragstart', () => {\r\n        originalSlot = piece.parentElement;        \r\n        draggedItem = piece;\r\n        setTimeout(() => {\r\n          draggedItem.style.display = 'none';\r\n        })\r\n      });\r\n      \r\n      piece.addEventListener('dragend', () => {       \r\n        setTimeout(() => {          \r\n          draggedItem.style.display = 'flex';\r\n          draggedItem = null\r\n        })\r\n      });  \r\n      \r\n      gridSlots.forEach(slot => {\r\n        const slotOriginalColor = slot.style.backgroundColor;\r\n\r\n        slot.addEventListener('dragover', (e) => {\r\n          e.preventDefault();          \r\n        });\r\n\r\n        slot.addEventListener('dragenter', (e) => {\r\n          e.preventDefault();\r\n          if (originalSlot.id !== slot.id && !slot.hasChildNodes()) {\r\n            slot.style.backgroundColor = this.hoveredSlotBg;          \r\n          }                \r\n        });\r\n\r\n        slot.addEventListener('dragleave', (e) => {\r\n          e.preventDefault();\r\n          const emptySlotIds = gridService.getIdNumbers(emptySlots);\r\n          const slotId = gridService.getIdNumber(slot)\r\n          if (!emptySlotIds.includes(slotId)) {\r\n            slot.style.backgroundColor = this.slotBg;   \r\n          }\r\n          else {\r\n            slot.style.backgroundColor = this.emptySlotBg  \r\n          }                 \r\n        });\r\n        \r\n        slot.addEventListener('drop', (e) => {          \r\n          const draggedSlot = draggedItem.parentNode;          \r\n          const slotId = gridService.getIdNumber(slot)\r\n          const draggedSlotId = gridService.getIdNumber(draggedSlot)     \r\n          if (!slot.hasChildNodes() && gridService.isAdjacent(slot, draggedSlot, this.gameSettings.arraySize)) { \r\n            draggedItem.style.display = 'flex';           \r\n            slot.append(draggedItem)            \r\n            slot.style.backgroundColor = this.slotBg\r\n            gridSlots = Array.from(document.querySelectorAll('.puzzle-grid__slot'));    \r\n            emptySlots = gridService.findEmptySlots(gridSlots)\r\n            gridService.coloringEmptySlots(emptySlots, this.emptySlotBg)    \r\n            transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);            \r\n            setTimeout(() => {\r\n              if (this.checkWiningCondition(transformedSlots, emptySlots)) {\r\n                this.announceWinning();\r\n              }              \r\n            }, 100)            \r\n          }\r\n          else if (slot.hasChildNodes() && this.swapChanceCount > 0) {            \r\n            const swapSuccess = gridService.swapPieces(draggedSlot, slot, this.gameSettings.arraySize)\r\n            slot.firstElementChild.style.display = 'flex';\r\n            transformedSlots = gridService.transformSlots(gridSlots, emptySlots, this.gameSettings.arraySize);\r\n            if (swapSuccess) {\r\n              this.swapChanceCount--;\r\n            } \r\n          }\r\n          else if (slotId !== draggedSlotId) {\r\n            slot.style.backgroundColor = slotOriginalColor;\r\n          }          \r\n        });         \r\n      })\r\n    });\r\n  }\r\n\r\n  checkWiningCondition(gridSlots, emptySlots) {\r\n    let count = 0;\r\n    const winningCount = gridSlots.length - emptySlots.length;       \r\n    gridSlots.forEach(slot => {\r\n      const child = slot.firstElementChild;\r\n      const slotId = gridService.getIdNumber(slot);\r\n      let childId = null;\r\n      if (child) {\r\n        childId = gridService.getIdNumber(child)\r\n      }\r\n      if (slotId === childId) {\r\n        count++;\r\n      }\r\n    })       \r\n    if (count === winningCount) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  announceWinning() {\r\n    this.props.broadcastWinning();    \r\n    setTimeout(() => {\r\n      console.log('You win the game', this.props.isWin);\r\n      alert('Congratulation! You win the game')  \r\n    }, 100)      \r\n  }\r\n  \r\n  render() {    \r\n    const gridSlots = this.createGridSlots(this.gameSettings.emptySlotQuantity);    \r\n    return (\r\n      <div className=\"component-wrapper puzzle-wrapper\">\r\n        <div className=\"puzzle-grid\" style={gridStyle}>\r\n          {gridSlots.map(item => item)}\r\n        </div>\r\n        <Timer className={'timer-pos'} \r\n          stop={this.isWin} \r\n          updateStop={this.subscribeWinning} \r\n          emitTime={this.getEmittedTime}\r\n        />\r\n        <PuzzleSwapCount className={'text-pos'} updateCount={this.getSwapChanceCount} swapChanceCount={this.swapChanceCount}/>\r\n        {/* <button onClick={this.announceWinning}>Win</button> */}\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n\r\nPuzzleGrid.propsType = {\r\n  broadcastWinning: PropTypes.func.isRequired,\r\n  restartGame: PropTypes.func.isRequired,\r\n  setWinningInfo: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  isWin: state.puzzle.isWin,\r\n  gameLevel: state.puzzle.gameLevel\r\n})\r\n\r\nexport default connect(mapStateToProps, { broadcastWinning, restartGame, setWinningInfo })(PuzzleGrid);","\r\nexport function broadcastWinning() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: true\r\n    })\r\n  }\r\n}\r\n\r\nexport function restartGame() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: false\r\n    })\r\n  }\r\n}\r\n\r\nexport function changeGameLevel(level) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'changeGameLevel',\r\n      level\r\n    })\r\n  }\r\n}\r\n\r\nexport function setWinningInfo(info) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'setWinningInfo',\r\n      winningInfo: info\r\n    })\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-menu.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class PuzzleMenu extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <ul className=\"puzzle-menu\">\r\n          <li>\r\n            <Link to=\"/puzzle/game\">Start Game</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/puzzle/score-board\">Score Board</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/puzzle/setting\">Setting</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './puzzle-setting.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { changeGameLevel } from 'actions/puzzle-action';\r\n\r\nclass PuzzleSetting extends React.Component {  \r\n  change = (event) => {    \r\n    this.props.changeGameLevel(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"puzzle-setting\">\r\n          <div className=\"setting-option-wrapper\">\r\n            <label htmlFor=\"level\" style={{marginRight: '10px'}}>Game Level:</label>\r\n            <select name=\"level\" id=\"level\" onChange={this.change} value={this.props.level}>\r\n              <option value=\"Easy\">Easy</option>\r\n              <option value=\"Normal\">Normal</option>\r\n              <option value=\"Hard\">Hard</option>\r\n            </select> \r\n          </div>\r\n                   \r\n          <li>\r\n            <Link to=\"/puzzle\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPuzzleSetting.propsType = {  \r\n  changeGameLevel: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  level: state.puzzle.gameLevel.level\r\n})\r\n\r\nexport default connect(mapStateToProps, { changeGameLevel })(PuzzleSetting);\r\n","import React from 'react';\r\nimport './puzzle-score-board.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nclass PuzzleScoreBoard extends React.Component {  \r\n  \r\n  render() {\r\n    const sortedWinningInfo = this.props.winningInfo.sort((info1, info2) => {\r\n      return info1.playedTime - info2.playedTime;\r\n    })\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"puzzle-menu\">\r\n          {sortedWinningInfo.map((info) => {\r\n            const index = sortedWinningInfo.indexOf(info)\r\n            return(\r\n              <p key={index}>{index+1}. {info.playerName}: {+info.playedTime/1000}s ({info.level})</p>\r\n            ) \r\n          })}          \r\n          <li>\r\n            <Link to=\"/puzzle\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  winningInfo: state.puzzle.winningInfo\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(PuzzleScoreBoard);\r\n","import React from 'react';\r\nimport './puzzle-page.scss';\r\nimport PuzzleGrid from './puzzle-grid/puzzle-grid';\r\nimport PuzzleMenu from './puzzle-menu/puzzle-menu';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport PuzzleSetting from './puzzle-setting/puzzle-setting';\r\nimport puzzleScoreBoard from './puzzle-score-board/puzzle-score-board';\r\n\r\nexport default class PuzzlePage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Switch>\r\n              <Route path=\"/puzzle\" exact component={PuzzleMenu} />\r\n              <Route path=\"/puzzle/game\" exact component={PuzzleGrid} />\r\n              <Route path=\"/puzzle/setting\" exact component={PuzzleSetting} />\r\n              <Route path=\"/puzzle/score-board\" exact component={puzzleScoreBoard} />\r\n            </Switch>\r\n          </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport PuzzlePage from 'pages/puzzle-page/puzzle-page';\r\n\r\nconst PuzzlePageRoute = () => {\r\n  return (\r\n    <Route path=\"/puzzle\" component={PuzzlePage} />\r\n  )\r\n}\r\n\r\nexport default PuzzlePageRoute;","import React from 'react';\r\nimport './home-page.scss';\r\n\r\nexport default class HomePage extends React.Component {  \r\n  render() {   \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <h1>HomePage</h1>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\nimport HomePage from 'pages/home-page/home-page';\r\nimport { GuardedRoute } from 'react-router-guards';\r\nconst HomePageRoute = () => {\r\n  return (\r\n    <GuardedRoute path=\"/\" exact component={HomePage} meta={{AUTH_ONLY: true}} />\r\n  )\r\n}\r\n\r\nexport default HomePageRoute;","import React from 'react';\r\nimport './clock.scss';\r\n\r\nexport default class Clock extends React.Component {\r\n  render() {    \r\n    const hour = this.props.hour\r\n    const minute = this.props.minute\r\n    const second = this.props.second\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"clock-wrapper\">\r\n          <div className=\"clock\">\r\n            <div className=\"hand hour-hand\" style={{transform: `rotate(${hour*30 + minute/2 + second/120 - 90}deg)`}}></div>\r\n            <div className=\"hand minute-hand\" style={{transform: `rotate(${minute*6 + second/10 - 90}deg)`}}></div>\r\n            <div className=\"hand second-hand\" style={{transform: `rotate(${second*6 - 90}deg)`}}></div>\r\n          </div>         \r\n        </div>\r\n        <div className=\"timer\">{hour}:{minute < 10 ? '0' + minute : minute}:{second < 10 ? '0' + second : second}</div>       \r\n      </div>      \r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\n\r\nimport './clock-page.scss';\r\nimport Clock from './clock/clock';\r\n\r\nexport default class ClockPage extends React.Component {\r\n  _isMounted = false;\r\n  clock;\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      time: new Date()\r\n    }    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.clock = setInterval(()=> {\r\n        this.setState(state => state.time = new Date())\r\n      }, 1000)\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    clearInterval(this.clock);\r\n  }\r\n\r\n  render() {        \r\n    const hour = this.state.time.getHours()\r\n    const minute = this.state.time.getMinutes()\r\n    const second = this.state.time.getSeconds()\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Clock \r\n            hour={hour} \r\n            minute={minute} \r\n            second={second} \r\n          />          \r\n        </header>\r\n      </div>\r\n    );\r\n  }  \r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport ClockPage from 'pages/clock-page/clock-page';\r\n\r\nconst ClockPageRoute = () => {\r\n  return (\r\n    <Route path=\"/clock\" component={ClockPage} />\r\n  )\r\n}\r\n\r\nexport default ClockPageRoute;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport './login-page.scss';\r\nimport { connect } from 'react-redux';\r\nimport { loginAction } from 'actions/auth-action';\r\n\r\nclass LoginPage extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.login = this.login.bind(this);\r\n  } \r\n\r\n  login() {    \r\n    this.props.loginAction();    \r\n  };\r\n\r\n  render() {     \r\n    if (this.props.isLoggedIn) {\r\n      return <Redirect to={\"/\"} />\r\n    }   \r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <button onClick={this.login}>Log in</button>\r\n      </div>\r\n    );    \r\n  }  \r\n}\r\n\r\nLoginPage.propTypes = {  \r\n  loginAction: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isLoggedIn: state.auth.isLoggedIn\r\n})\r\n\r\nexport default connect(mapStateToProps, { loginAction })(LoginPage);","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport LoginPage from 'pages/login-page/login-page';\r\n\r\nconst LoginPageRoute = () => {\r\n  return (\r\n    <Route path=\"/login\" component={LoginPage} />\r\n  )\r\n}\r\n\r\nexport default LoginPageRoute;","export function increaseMoveCount(currentMoveCount) {\r\n  return function(dispatch) {        \r\n    dispatch({\r\n      type: 'increaseMoveCount',\r\n      moveCount: increaseCount(currentMoveCount),      \r\n    })\r\n  }\r\n}\r\n\r\nexport function increaseMatchedPairCount(currentMatchedPairs) {\r\n  return function(dispatch) {        \r\n    dispatch({\r\n      type: 'increaseMatchedPairCount',\r\n      matchedPairs: increaseCount(currentMatchedPairs),      \r\n    })\r\n  }\r\n}\r\n\r\nexport function setWait(isWaiting) {\r\n  return function(dispatch) {        \r\n    dispatch({\r\n      type: 'setWait',\r\n      isWaiting,      \r\n    })\r\n  }\r\n}\r\n\r\nexport function broadcastWinning() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'broadcastWinning',\r\n      isWin: true\r\n    })\r\n  }\r\n}\r\n\r\nexport function restartGame() {\r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'restartGame',\r\n      isWin: false,\r\n      moveCount: 0,\r\n      matchedPairs: 0,\r\n    })\r\n  }\r\n}\r\n\r\nexport function changeGameLevel(level) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'changeGameLevel',\r\n      level\r\n    })\r\n  }\r\n}\r\n\r\nexport function setWinningInfo(info) {  \r\n  return function(dispatch) {    \r\n    dispatch({\r\n      type: 'setWinningInfo',\r\n      winningInfo: info\r\n    })\r\n  }\r\n}\r\n\r\nfunction increaseCount(count) {\r\n  return ++count;\r\n}\r\n","import axios from 'axios';\r\n\r\nconst updateWinningInfo = (winningInfo) => {\r\n  axios.post(`https://5e9e56abfb467500166c3dce.mockapi.io/react-misc/card-score`, {winningInfo})\r\n    .then(res => {      \r\n      console.log(res.data);\r\n    })\r\n    .catch(error => console.log(error));\r\n}\r\n\r\nconst getWinningInfo = async () => {\r\n  return axios({\r\n    method: 'GET',\r\n    url: `https://5e9e56abfb467500166c3dce.mockapi.io/react-misc/card-score`\r\n  }).catch(error => console.log(error))  \r\n}\r\n\r\nconst cardService = {\r\n  updateWinningInfo,\r\n  getWinningInfo\r\n}\r\n\r\nexport default cardService;","import React from 'react';\r\nimport './card-piece.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { increaseMatchedPairCount, setWait, increaseMoveCount, \r\n  broadcastWinning, setWinningInfo } \r\n  from 'actions/card-action';\r\nimport cardService from 'services/card.service';\r\n\r\nclass CardPiece extends React.Component {\r\n  constructor(props) {\r\n    super()    \r\n    this.flipCardUp = this.flipCardUp.bind(this); \r\n    this.setWinningInfo = this.setWinningInfo.bind(this);\r\n    this.checkWiningCondition = this.checkWiningCondition.bind(this);   \r\n    this.announceWinning = this.announceWinning.bind(this);   \r\n  }\r\n\r\n  componentDidMount() {    \r\n   \r\n  }\r\n\r\n  setWinningInfo(winningInfo) {          \r\n    this.props.setWinningInfo(winningInfo)\r\n  }\r\n\r\n  updateWinningInfo(winningInfo) {\r\n    cardService.updateWinningInfo(winningInfo);\r\n  }\r\n\r\n  isPairMatching() { \r\n    const openedPair = document.getElementsByClassName('flip-up unmatched');\r\n    const card1Name = openedPair[0].getAttribute(\"name\");\r\n    const card2Name = openedPair[1].getAttribute(\"name\");\r\n    if (card1Name === card2Name) {\r\n      return true\r\n    }\r\n    return false;       \r\n  }\r\n\r\n  disableFlip() {    \r\n    const openedPair = document.getElementsByClassName('flip-up unmatched');\r\n    const card1 = openedPair[0];\r\n    const card2 = openedPair[1];\r\n    card1.classList.remove('unmatched')  \r\n    card2.classList.remove('unmatched')  \r\n  }\r\n\r\n  isEven(number) {\r\n    return number % 2 === 0;\r\n  }\r\n\r\n  shiftArrayToLeft(arr, steps) {    \r\n    arr = arr.concat(arr.splice(0, steps)); \r\n    return arr;    \r\n  }\r\n\r\n  changeCardsPosition() {\r\n    const slots = document.getElementsByClassName('card-grid__slot');\r\n    const unmatchedSlots = [];\r\n    let children = [];\r\n    for (const slot of slots) {\r\n      const child = slot.firstChild;\r\n      if (child.classList.contains('unmatched')) {\r\n        children.push(child);\r\n        unmatchedSlots.push(slot);\r\n      }      \r\n    }\r\n    children = this.shiftArrayToLeft(children, 2);\r\n    for (let i = 0; i < unmatchedSlots.length; i++) {   \r\n      const slot = unmatchedSlots[i];      \r\n      const firstChild = slot.firstChild;     \r\n      if (firstChild) {\r\n        slot.removeChild(firstChild)\r\n      }       \r\n      slot.appendChild(children[i]);      \r\n    }     \r\n  }\r\n\r\n  flipCardUp() {\r\n    const cardPiece = document.querySelector(`#piece-${this.props.id}`);  \r\n    if (cardPiece.classList.contains('unmatched') && !this.props.isWaiting) {      \r\n      if (!cardPiece.classList.contains('flip-up')) {       \r\n        cardPiece.classList.add('flip-up');\r\n        this.props.increaseMoveCount(this.props.moveCount)           \r\n        if (this.isEven(this.props.moveCount+1)) {\r\n          if(this.isPairMatching()) {\r\n            this.props.increaseMatchedPairCount(this.props.matchedPairs)\r\n            this.disableFlip();            \r\n            if (this.checkWiningCondition()) {\r\n              const winningInfo = {\r\n                moves: this.props.moveCount + 1,\r\n                playerName: 'Unknown player',\r\n                level: this.props.gameLevel.level\r\n              }\r\n              this.announceWinning();\r\n              this.setWinningInfo(winningInfo);\r\n              this.updateWinningInfo(winningInfo);\r\n            }            \r\n          }\r\n          else {\r\n            this.props.setWait(true);\r\n            setTimeout(() => this.flipCardsDown(), 1000);           \r\n          }          \r\n          if (this.props.gameLevel.level === 'Hard') {\r\n            setTimeout(() => this.changeCardsPosition(), 1001);\r\n          }          \r\n        }        \r\n      }\r\n    }           \r\n  }  \r\n\r\n  flipCardsDown() {    \r\n    const openedCards = [...document.getElementsByClassName('flip-up unmatched')];\r\n    for (const card of openedCards) {\r\n      if (card.classList.contains('unmatched')) {      \r\n        if (card.classList.contains('flip-up')) {\r\n          card.classList.remove('flip-up');\r\n        }\r\n      }\r\n    }    \r\n    this.props.setWait(false);   \r\n  }\r\n\r\n  checkWiningCondition() {\r\n    const arraySize = this.props.gameLevel.arraySize;\r\n    if (this.props.matchedPairs+1 === arraySize*arraySize/2) {\r\n      return true\r\n    }\r\n    return false;\r\n  }\r\n\r\n  announceWinning() {\r\n    this.props.broadcastWinning();    \r\n    setTimeout(() => {\r\n      console.log('You win the game', this.props.isWin);\r\n      alert('Congratulation! You win the game')  \r\n    }, 100)      \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper card-wrapper h-full unmatched\" name={this.props.name} \r\n        id={`piece-${this.props.id}`} onClick={this.flipCardUp}>\r\n        <div id={`piece-${this.props.id}-front`} className=\"card-piece card-front\">\r\n          <h1>{this.props.name}</h1>\r\n        </div>\r\n        <div id={`piece-${this.props.id}-back`} className=\"card-piece card-back\"></div>\r\n      </div>      \r\n    );\r\n  }\r\n}\r\n\r\nCardPiece.propsType = {\r\n  countMoves: PropTypes.func.isRequired,\r\n  countMatchedPairs: PropTypes.func.isRequired,\r\n  setWait: PropTypes.func.isRequired,\r\n  broadcastWinning: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  moveCount: state.card.moveCount,\r\n  matchedPairs: state.card.matchedPairs,\r\n  isWaiting: state.card.isWaiting,\r\n  gameLevel: state.card.gameLevel,\r\n  winningInfo: state.card.winningInfo\r\n})\r\n\r\nexport default connect(mapStateToProps, { \r\n  increaseMoveCount, increaseMatchedPairCount, setWait, broadcastWinning,\r\n  setWinningInfo \r\n})(CardPiece);","import React from 'react';\r\nimport CardPiece from '../card-piece/card-piece'\r\nimport './card-grid-slot.scss';\r\n\r\nexport default class CardGridSlot extends React.Component {\r\n\r\n  createCardPiece() {\r\n    const id = this.props.pieceId;\r\n    const name = this.props.name;\r\n    if (id !== null) {      \r\n      return <CardPiece key={id} id={id} name={name}/>\r\n    }    \r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div id={`slot-${this.props.id}`} className=\"card-grid__slot\">\r\n        {this.createCardPiece()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './counter.scss';\r\n\r\nexport default class Counter extends React.Component {\r\n  _isMounted = false;\r\n  _stopSubscribe = false;\r\n  subscribeCount = () => {    \r\n    this.props.updateCount((count) => {               \r\n      if (!this._stopSubscribe && count !== this.state.count) {\r\n        this.setState(state => state.count = count)        \r\n      }                    \r\n    })\r\n  }\r\n\r\n  constructor(props){\r\n    super(props)\r\n    this.state = {\r\n      subscribeTimer: 0,\r\n      count: props.count      \r\n    }\r\n    this.startSubscribe.bind(this)    \r\n  }\r\n\r\n  componentDidMount() {\r\n    this._isMounted = true;\r\n    if (this._isMounted) {\r\n      this.startSubscribe();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n    this._stopSubscribe = true;        \r\n  }\r\n\r\n  startSubscribe() {    \r\n    setInterval(() => this.setState({\r\n      subscribeTimer: this.state.subscribeTimer + 1\r\n    }), 50);\r\n  }\r\n\r\n  render() {    \r\n    if (!this._stopSubscribe) {\r\n      setTimeout(() => this.subscribeCount(), 0)    \r\n    }\r\n                 \r\n    return (     \r\n      <div className={`component-wrapper ${this.props.className}`}>\r\n        <p>{this.props.label}: {this.state.count}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const CardGridService = () => {\r\n  return {    \r\n    getRandomPieceName,    \r\n  }\r\n};\r\n\r\nconst getRandomPieceName = (pieceNames) => {       \r\n  const splicePos = Math.floor(Math.random()*100 % pieceNames.length)\r\n  const pieceId = pieceNames.splice(splicePos, 1)\r\n  return pieceId[0]; \r\n}\r\n\r\nexport default CardGridService;","import React from 'react';\r\nimport './card-grid.scss';\r\nimport CardGridSlot from '../card-grid-slot/card-grid-slot';\r\nimport Counter from '../counter/counter'\r\nimport Timer from 'components/timer/timer';\r\nimport constants from 'shared/constants';\r\nimport * as _ from 'lodash';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { broadcastWinning, restartGame, setWinningInfo } from 'actions/card-action';\r\nimport GridService from 'services/grid.service';\r\nimport CardGridService from 'services/card-grid.service';\r\n\r\nconst gridService = GridService();\r\nconst cardGridService = CardGridService();\r\n\r\nconst gridSlotSize = (gridSize) => {\r\n  let width = 160\r\n  let height = 160\r\n  if (gridSize.width > 3 || gridSize.height > 3) {\r\n    width = 120\r\n    height = 120 \r\n  }\r\n  return {\r\n    width,\r\n    height\r\n  }  \r\n}\r\n\r\nconst gap = 10;\r\nconst HorizontalGaps = constants.GRID_SIZE_LV2.width * gap;\r\nconst VerticalGaps = constants.GRID_SIZE_LV2.height * gap;\r\n\r\nconst gridStyle = { \r\n  width: `${constants.GRID_SIZE_LV2.width * gridSlotSize(constants.GRID_SIZE_LV2).width + HorizontalGaps}px`,\r\n  height: `${constants.GRID_SIZE_LV2.height * gridSlotSize(constants.GRID_SIZE_LV2).height + VerticalGaps}px`,  \r\n  gridTemplateColumns: `repeat(${constants.GRID_SIZE_LV2.width}, ${gridSlotSize(constants.GRID_SIZE_LV2).width}px)`,\r\n  gridTemplateRows: `repeat(${constants.GRID_SIZE_LV2.height}, ${gridSlotSize(constants.GRID_SIZE_LV2).height}px)`,\r\n  gridGap: `${gap}px`,\r\n  border: `1px solid wheat`,  \r\n}\r\n\r\nclass CardGrid extends React.Component {\r\n  emptySlotBg = 'rgba(255, 255, 255, 0.3)';\r\n  slotBg = 'rgba(255, 255, 255, 1)';\r\n  hoveredSlotBg = 'rgba(255, 255, 255, .6)';\r\n  _isMounted = false;\r\n  isWin = false; \r\n  subscribeWinning = (callback) => {\r\n    this.isWin = this.props.isWin;      \r\n    callback(this.isWin);\r\n  }\r\n  getEmittedTime = (emittedTime) => {\r\n    console.log('get time');     \r\n    const winningInfo = {\r\n      playedTime: emittedTime,\r\n      playerName: 'Unknown player',\r\n      level: this.props.gameLevel.level\r\n    }\r\n    this.props.setWinningInfo(winningInfo)\r\n  }  \r\n\r\n  constructor(props) {\r\n    super(props);    \r\n    this.getMoveCount = this.getMoveCount.bind(this);\r\n    this.getMatchedPairs = this.getMatchedPairs.bind(this);\r\n    this.gameSettings = {\r\n      emptySlotQuantity: props.gameLevel.emptySlotQuantity,\r\n      arraySize: props.gameLevel.arraySize\r\n    }   \r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (nextProps.isUpdated) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  componentDidMount() {    \r\n    \r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.restartGame();\r\n  }\r\n\r\n  createGridSlots() {\r\n    const slots = [];\r\n    const gridSize = constants.GRID_SIZE_LV2.height * constants.GRID_SIZE_LV2.width;    \r\n    const pieceIdSet = gridService.getPieceIdSet(gridSize);\r\n    const pieceNames = ['A', 'A', 'B', 'B', 'C', 'C', 'D', 'D', 'E', 'E', 'F', 'F', 'G', 'G', 'H', 'H']    \r\n    for (let i = 0; i < gridSize; i++) {\r\n      const name = cardGridService.getRandomPieceName(pieceNames);\r\n      let pieceId = gridService.getRandomPieceId(pieceIdSet);          \r\n      slots.push(<CardGridSlot id={i} key={i} pieceId={pieceId} name={name}/>)\r\n    }\r\n    return slots;\r\n  } \r\n\r\n  getMoveCount(callback) {                   \r\n    callback(this.props.moveCount)\r\n  } \r\n  \r\n  getMatchedPairs(callback) {                   \r\n    callback(this.props.matchedPairs)\r\n  }\r\n  \r\n  render() {    \r\n    const gridSlots = this.createGridSlots(this.gameSettings.emptySlotQuantity);    \r\n    return (\r\n      <div className=\"component-wrapper card-wrapper\">\r\n        <div className=\"card-grid\" style={gridStyle}>\r\n          {gridSlots.map(item => item)}\r\n        </div>\r\n        {/* <Timer className={'timer-pos'} \r\n          stop={this.isWin} \r\n          updateStop={this.subscribeWinning} \r\n          emitTime={this.getEmittedTime}\r\n        /> */}\r\n        <Counter className={'text-pos'} \r\n          label=\"Moves\"\r\n          updateCount={this.getMoveCount} \r\n          count={this.props.moveCount}/>\r\n        <Counter className={'text-pos-2'} \r\n          label=\"Matches\"\r\n          updateCount={this.getMatchedPairs} \r\n          count={this.props.matchedPairs}/> \r\n      </div>\r\n    );\r\n  }  \r\n}\r\n\r\nCardGrid.propsType = {\r\n  broadcastWinning: PropTypes.func.isRequired,\r\n  restartGame: PropTypes.func.isRequired,\r\n  setWinningInfo: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  isWin: state.card.isWin,\r\n  gameLevel: state.card.gameLevel,\r\n  moveCount: state.card.moveCount,\r\n  matchedPairs: state.card.matchedPairs\r\n})\r\n\r\nexport default connect(mapStateToProps, { broadcastWinning, restartGame, setWinningInfo: setWinningInfo })(CardGrid);","import React from 'react';\r\nimport './card-menu.scss';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default class CardMenu extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <ul className=\"card-menu\">\r\n          <li>\r\n            <Link to=\"/card/game\">Start Game</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/card/score-board\">Score Board</Link>\r\n          </li>\r\n          <li>\r\n            <Link to=\"/card/setting\">Setting</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './card-setting.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { connect } from 'react-redux';\r\nimport { changeGameLevel } from 'actions/card-action';\r\n\r\nclass CardSetting extends React.Component {  \r\n  change = (event) => {    \r\n    this.props.changeGameLevel(event.target.value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"card-setting\">\r\n          <div className=\"setting-option-wrapper\">\r\n            <label htmlFor=\"level\" style={{marginRight: '10px'}}>Game Level:</label>\r\n            <select name=\"level\" id=\"level\" onChange={this.change} value={this.props.level}>              \r\n              <option value=\"Normal\">Normal</option>\r\n              <option value=\"Hard\">Hard</option>\r\n            </select> \r\n          </div>\r\n                   \r\n          <li>\r\n            <Link to=\"/card\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nCardSetting.propsType = {  \r\n  changeGameLevel: PropTypes.func.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  level: state.card.gameLevel.level\r\n})\r\n\r\nexport default connect(mapStateToProps, { changeGameLevel })(CardSetting);\r\n","import React from 'react';\r\nimport './card-score-board.scss';\r\nimport { Link } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport cardService from 'services/card.service';\r\n\r\n\r\nclass CardScoreBoard extends React.Component { \r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      winningInfo: {}\r\n    };\r\n    this.getWinningInfo = this.getWinningInfo.bind(this);    \r\n  }\r\n\r\n  componentWillMount() {   \r\n    this.getWinningInfo();\r\n  }\r\n  \r\n  getWinningInfo() {      \r\n    cardService.getWinningInfo().then(res => {\r\n      const sortedWinningInfo = res.data.sort((info1, info2) => {\r\n        return info1.winningInfo.moves - info2.winningInfo.moves;\r\n      })\r\n      this.setState({\r\n        winningInfo: sortedWinningInfo\r\n      })\r\n    })    \r\n  }\r\n  \r\n  render() {       \r\n    const sortedWinningInfo = this.state.winningInfo;\r\n    let infoList = null; \r\n    if (sortedWinningInfo.length > 0) {\r\n      infoList = sortedWinningInfo.map((data) => {\r\n        const index = sortedWinningInfo.indexOf(data)\r\n        const info = data.winningInfo\r\n        return(\r\n          <p key={index}>{index+1}. {info.playerName}: {+info.moves} moves ({info.level})</p>\r\n        ) \r\n      })\r\n    }        \r\n    return (\r\n      <div className=\"component-wrapper\">        \r\n        <ul className=\"card-menu\"> {  \r\n            infoList\r\n          }          \r\n          <li>\r\n            <Link to=\"/card\">Back</Link>\r\n          </li>\r\n        </ul>\r\n      </div>\r\n    );    \r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  isUpdated: false,\r\n  winningInfo: state.card.winningInfo\r\n})\r\n\r\nexport default connect(mapStateToProps, {})(CardScoreBoard);\r\n","import React from 'react';\r\nimport './card-page.scss';\r\nimport CardGrid from './card-grid/card-grid';\r\nimport CardMenu from './card-menu/card-menu';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport CardSetting from './card-setting/card-setting';\r\nimport cardScoreBoard from './card-score-board/card-score-board';\r\n\r\nexport default class CardPage extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n            <Switch>\r\n              <Route path=\"/card\" exact component={CardMenu} />\r\n              <Route path=\"/card/game\" exact component={CardGrid} />\r\n              <Route path=\"/card/setting\" exact component={CardSetting} />\r\n              <Route path=\"/card/score-board\" exact component={cardScoreBoard} />\r\n            </Switch>\r\n          </header>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport CardPage from 'pages/card-page/card-page';\r\n\r\nconst CardPageRoute = () => {\r\n  return (\r\n    <Route path=\"/card\" component={CardPage} />\r\n  )\r\n}\r\n\r\nexport default CardPageRoute;","import React from 'react';\r\nimport { requireLogin } from 'router/guards';\r\nimport { GuardProvider } from 'react-router-guards';\r\nimport history from 'services/history.service';\r\nimport { Switch } from 'react-router-dom';\r\nimport { Router } from \"react-router\";\r\nimport { HashRouter } from 'react-router-dom';\r\nimport Nav from 'components/nav/nav';\r\nimport PuzzlePageRoute from 'pages/puzzle-page/puzzle-page-route'\r\nimport HomePageRoute from 'pages/home-page/home-page-route'\r\nimport ClockPageRoute from 'pages/clock-page/clock-page-route'\r\nimport LoginPageRoute from 'pages/login-page/login-page-route';\r\nimport CardPageRoute from 'pages/card-page/card-page-route';\r\n\r\nconst GLOBAL_GUARDS = [requireLogin];\r\nconst MainRouter = () => {\r\n  return (\r\n    <HashRouter history={history}>\r\n      <Nav />\r\n      <GuardProvider guards={GLOBAL_GUARDS} loading=\"Loading...\" >\r\n        <Switch>\r\n          {HomePageRoute()}\r\n          {ClockPageRoute()}\r\n          {PuzzlePageRoute()}\r\n          {CardPageRoute()}\r\n          {LoginPageRoute()}\r\n        </Switch>\r\n      </GuardProvider>          \r\n    </HashRouter>\r\n  )\r\n}\r\n\r\nexport default MainRouter;","import {LOGIN, LOGOUT} from 'actions/type';\r\nimport { getIsLoggedIn } from 'utils';\r\n\r\nconst initialState = {\r\n  isLoggedIn: getIsLoggedIn()\r\n}\r\n\r\nexport default function(state = initialState, action) {  \r\n  switch (action.type) {\r\n    case LOGIN:      \r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn\r\n      };\r\n    case LOGOUT:\r\n      return {\r\n        ...state,\r\n        isLoggedIn: action.isLoggedIn\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","const initialState = {\r\n  isWin: false,\r\n  gameLevel: {\r\n    level: 'Normal',\r\n    emptySlotQuantity: 2,\r\n    arraySize: 3\r\n  },\r\n  winningInfo: []\r\n}\r\n\r\nconst changeLevel = (level) => {\r\n  switch (level) {\r\n    case 'Easy':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 3,\r\n        arraySize: 3\r\n      }\r\n    case 'Normal':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 2,\r\n        arraySize: 3\r\n      }\r\n    case 'Hard':\r\n      return {\r\n        level,\r\n        emptySlotQuantity: 1,\r\n        arraySize: 3\r\n      }\r\n    default:\r\n      return {\r\n        level: 2,\r\n        emptySlotQuantity: 2,\r\n        arraySize: 3\r\n      }\r\n  }\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'broadcastWinning':\r\n      return {\r\n        ...state,\r\n        isWin: action.isWin\r\n      };\r\n    case 'changeGameLevel':\r\n      return {\r\n        ...state,\r\n        gameLevel: changeLevel(action.level)\r\n      };\r\n    case 'setWinningInfo':\r\n      console.log(state.winningInfo);\r\n      console.log(action.winningInfo);\r\n      return {\r\n        ...state,\r\n        winningInfo: [...state.winningInfo, action.winningInfo]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","const initialState = {\r\n  moveCount: 0,\r\n  matchedPairs: 0,\r\n  isWaiting: false,\r\n  isWin: false,\r\n  gameLevel: {\r\n    level: 'Hard',    \r\n    arraySize: 4\r\n  },\r\n  winningInfo: []\r\n}\r\n\r\nconst changeLevel = (level) => {\r\n  switch (level) {   \r\n    case 'Normal':\r\n      return {\r\n        level,        \r\n        arraySize: 4\r\n      }\r\n    case 'Hard':\r\n      return {\r\n        level,        \r\n        arraySize: 4\r\n      }\r\n    default:\r\n      return {\r\n        level: 'Normal',        \r\n        arraySize: 4\r\n      }\r\n  }\r\n}\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case 'broadcastWinning':\r\n      return {\r\n        ...state,\r\n        isWin: action.isWin\r\n      };\r\n    case 'changeGameLevel':\r\n      return {\r\n        ...state,\r\n        gameLevel: changeLevel(action.level)\r\n      };\r\n    case 'setWinningInfo':\r\n      return {\r\n        ...state,\r\n        winningInfo: [...state.winningInfo, action.winningInfo]\r\n      };\r\n    case 'increaseMoveCount':\r\n      return {\r\n        ...state,\r\n        moveCount: action.moveCount\r\n      };\r\n    case 'setWait':\r\n      return {\r\n        ...state,\r\n        isWaiting: action.isWaiting\r\n      };\r\n    case 'increaseMatchedPairCount':\r\n      return {\r\n        ...state,\r\n        matchedPairs: action.matchedPairs\r\n      };\r\n    case 'restartGame':\r\n      return {\r\n        ...state,\r\n        isWin: action.isWin,\r\n        moveCount: action.moveCount,\r\n        matchedPairs: action.matchedPairs,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};","import { combineReducers } from 'redux';\r\nimport authReducer from './auth-reducer'\r\nimport puzzleReducer from './puzzle-reducer'\r\nimport cardReducer from './card-reducer';\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  puzzle: puzzleReducer,\r\n  card: cardReducer\r\n})","import { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from 'reducers';\r\n\r\nconst initialState = {};\r\nconst middleware = [thunk];\r\nconst reduxDevTools = process.env.NODE_ENV === 'prod' ? null :\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\r\nconst store = createStore(\r\n  rootReducer, \r\n  initialState, \r\n  compose(\r\n    applyMiddleware(...middleware)\r\n  )\r\n);\r\n\r\n// const storeDev = createStore(\r\n//   rootReducer, \r\n//   initialState, \r\n//   compose(    \r\n//     applyMiddleware(...middleware),\r\n//     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n//   )\r\n// );\r\n\r\n/* Use when no redux dev tools */\r\nexport default store;\r\n\r\n/* Use when dev with redux dev tools */\r\n// export default storeDev;","import React from 'react';\r\nimport './App.scss';\r\nimport { Provider} from 'react-redux';\r\nimport { MainRouter } from 'router';\r\nimport store from 'store/store';\r\n\r\nexport default class App extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"component-wrapper\">\r\n        <Provider store={store}>          \r\n          <MainRouter />\r\n        </Provider>        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App.jsx';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}